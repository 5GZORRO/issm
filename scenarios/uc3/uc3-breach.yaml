# Copyright 2021 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################
#
# ISBP breach handler Scenario uc3:
# ===============================
#
# Scenario uc3 deals with instantiating a SW and scaling it out by selecting the
# best 3rd party operator that fulfils its sizing demands.
#
# This handler is being triggered whenver an SLA breach notification arrives from ISBP module.
#
# Parameters:
#
#     transaction_uuid: the uuid of the transaction that instantiated the service where the SLA breach occured
#     # service_id: the instance id of this service that caused this violation
#     product_DID: the DID of the SW offer this service instance is from
#     place: the location of where this violation occured (PO TMF format)
#
# Steps:
#
# * Retrieve the transaction object from transaction_uuid
#       - service_owner (the stakeholder)
#       - product_id
#       - catalogue_url
#       - elma_url
#
# * If scaleout operation occured in this location for this service_id, in last x time - ignore
#
# * Send scale out intent on behalf of service_owner (the stakeholder) with # service_id,
#       product_id, place, catalogue_url, elma_url
#
# ==============================================================================

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: uc3-breach
spec:
  templates:
  - name: handle-breach
    dag:
      tasks:
      - name: get-transaction
        template: issm-api-get-transaction
        arguments:
          parameters:
          - name: service_ip
            value: "{{workflow.parameters.service_ip}}"
          - name: service_port
            value: "{{workflow.parameters.service_port}}"
          - name: transaction_uuid
            value: "{{workflow.parameters.transaction_uuid}}"

      - name: transaction-data
        # Retrieve 'service_owner' (stakeholder), access
        # infos
        dependencies: [get-transaction]
        template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{tasks.get-transaction.outputs.result}}"

      - name: trigger-scaleout
        template: trigger-scaleout
        dependencies: [transaction-data]
        arguments:
          parameters:
          - name: service_owner
            value: "{{tasks.transaction-data.outputs.parameters.service_owner}}"
          - name: place
            value: "{{workflow.parameters.place}}"
          - name: product_id
            value: "{{tasks.transaction-data.outputs.parameters.product_id}}"
          - name: service_id
            value: "{{workflow.parameters.instance_id}}"
          - name: scenario
            value: "{{tasks.transaction-data.outputs.parameters.scenario}}"
          - name: elma_url
            value: "{{tasks.transaction-data.outputs.parameters.elma_url}}"
          - name: catalogue_url
            value: "{{tasks.transaction-data.outputs.parameters.catalogue_url}}"
          - name: trmf_url
            value: "{{tasks.transaction-data.outputs.parameters.trmf_url}}"

  - name: trigger-scaleout
    inputs:
      parameters:
      - name: service_owner
      - name: place
      - name: product_id
      - name: service_id
      - name: scenario
      - name: elma_url
      - name: catalogue_url
      - name: trmf_url
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-scaleout
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              # Triggering here a new bussines transaction:
              # important that event and transaction uuids are the same
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}", "transaction_uuid": "{{steps.event-uuid.outputs.result}}",
                  "scenario": "{{inputs.parameters.scenario}}",
                  "operation": "scaleout", "sub_operation": "new_intent",
                  "place": {{inputs.parameters.place}},
                  "service_owner": "{{inputs.parameters.service_owner}}",
                  "product_id": "{{inputs.parameters.product_id}}",
                  "service_id": "{{inputs.parameters.service_id}}",
                  "elma_url": "{{inputs.parameters.elma_url}}",
                  "catalogue_url": "{{inputs.parameters.catalogue_url}}",
                  "trmf_url": "{{inputs.parameters.trmf_url}}",
                  "sla_breach": {
                    "applicable": "true",
                    "breachPredictionNotification": {{workflow.parameters.breachPredictionNotification}}
                  }
                }
            - name: kafka_topic
              value: "issm-in-{{inputs.parameters.service_owner}}"

  - name: issm-api-get-transaction
    inputs:
      parameters:
      - name: service_ip
      - name: service_port
      - name: transaction_uuid
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys

        headers = {'Content-Type': 'application/json'}

        r = requests.get("http://{{inputs.parameters.service_ip}}:{{inputs.parameters.service_port}}/workflows/{{inputs.parameters.transaction_uuid}}",
            headers=headers)
        json.dump(r.json(), sys.stdout)

  - name: jq-script
    inputs:
      parameters:
      - name: json_str
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [sh]
      source: |
        echo '{{inputs.parameters.json_str}}' | jq -r '.workflow_parameters[] | select(.name=="service_owner").value' > /tmp/service_owner.txt
        echo '{{inputs.parameters.json_str}}' | jq -r '.workflow_parameters[] | select(.name=="scenario").value' > /tmp/scenario.txt
        echo '{{inputs.parameters.json_str}}' | jq -r '.workflow_parameters[] | select(.name=="elma_url").value' > /tmp/elma_url.txt
        echo '{{inputs.parameters.json_str}}' | jq -r '.workflow_parameters[] | select(.name=="catalogue_url").value' > /tmp/catalogue_url.txt
        echo '{{inputs.parameters.json_str}}' | jq -r '.workflow_parameters[] | select(.name=="trmf_url").value' > /tmp/trmf_url.txt
        echo '{{inputs.parameters.json_str}}' | jq -r '.workflow_parameters[] | select(.name=="product_id").value' > /tmp/product_id.txt
    outputs:
      parameters:
      - name: service_owner
        valueFrom:
          path: /tmp/service_owner.txt

      - name: scenario
        valueFrom:
          path: /tmp/scenario.txt

      - name: elma_url
        valueFrom:
          path: /tmp/elma_url.txt

      - name: catalogue_url
        valueFrom:
          path: /tmp/catalogue_url.txt

      - name: trmf_url
        valueFrom:
          path: /tmp/trmf_url.txt

      - name: product_id
        valueFrom:
          path: /tmp/product_id.txt
