apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: snfvo-ota-flow
spec:
  templates:
  - name: instantiate
    steps:
    - - name: instantiate-service
        when: "{{workflow.parameters.sub_operation}} == \"INSTANTIATE_SERVICE\""
        template: instantiate-service

  - name: instantiate-service
    dag:
      tasks:
      - name: edge-order-id
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: edge_order_id
          - name: json_str
            value: |
              {{workflow.parameters.snfvo_data}}

      - name: userdata-edge
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: userdata_edge
          - name: json_str
            value: |
              {{workflow.parameters.snfvo_data}}

      - name: get-edge-order-from-catalog
        dependencies: [edge-order-id]
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{tasks.edge-order-id.outputs.result}}"

      - name: trigger-orchestration-edge
        dependencies: [userdata-edge, get-edge-order-from-catalog]
        templateRef:
          name: workflow-orchestrator
          template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            # domain's orchestrator
            value: "{{tasks.get-edge-order-from-catalog.outputs.parameters.related_party}}"

          - name: vsbName
            value: "{{tasks.get-edge-order-from-catalog.outputs.parameters.vsbName}}"

          - name: product_DID
            value: ""

          - name: sla_DID
            value: ""

          - name: place
            value: "{{tasks.get-edge-order-from-catalog.outputs.parameters.place}}"

          - name: userdata
            value: "{{tasks.userdata-edge.outputs.result}}"

          - name: vsd_parameters
            value: "{{workflow.parameters.vsd_parameters}}"

      - name: wait-for-edge-status
        dependencies: [trigger-orchestration-edge]
        template: consume
        arguments:
          parameters:
          - name: kafka_ip
            value: "{{workflow.parameters.kafka_ip}}"
          - name: kafka_port
            value: "{{workflow.parameters.kafka_port}}"
          - name: kafka_topic
            value: "issm-in-{{workflow.parameters.service_owner}}"
          - name: msg_id
            value: "{{tasks.trigger-orchestration-edge.outputs.parameters.event_uuid}}"

      - name: status-attributes
        dependencies: [wait-for-edge-status]
        template: edge-service-attributes
        arguments:
          parameters:
          - name: payload
            value: |
              {{tasks.wait-for-edge-status.outputs.parameters.payload}}

      - name: get-order-from-catalog
        dependencies: [wait-for-edge-status]
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.order_id}}"

      - name: userdata-core
        dependencies: [wait-for-edge-status]
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: userdata_core
          - name: json_str
            value: |
              {{workflow.parameters.snfvo_data}}

      - name: add-user-data-core
        dependencies: [status-attributes, userdata-core]
        templateRef:
          name: workflow-base
          template: add-to-dict
        arguments:
          parameters:
          - name: dict1
            value: "{{tasks.userdata-core.outputs.result}}"
          - name: dict2
            value: "{{tasks.status-attributes.outputs.parameters.dict}}"

      - name: trigger-orchestration-core
        dependencies: [add-user-data-core, get-order-from-catalog]
        templateRef:
          name: workflow-orchestrator
          template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            # domain's orchestrator
            value: "{{tasks.get-order-from-catalog.outputs.parameters.related_party}}"

          - name: vsbName
            value: "{{tasks.get-order-from-catalog.outputs.parameters.vsbName}}"

          - name: product_DID
            value: ""

          - name: sla_DID
            value: ""

          - name: place
            value: "{{tasks.get-order-from-catalog.outputs.parameters.place}}"

          - name: userdata
            value: "{{tasks.add-user-data-core.outputs.parameters.dict}}"

          - name: vsd_parameters
            value: "{{workflow.parameters.vsd_parameters}}"

      - name: wait-for-core-status
        dependencies: [trigger-orchestration-core]
        template: consume
        arguments:
          parameters:
          - name: kafka_ip
            value: "{{workflow.parameters.kafka_ip}}"
          - name: kafka_port
            value: "{{workflow.parameters.kafka_port}}"
          - name: kafka_topic
            value: "issm-in-{{workflow.parameters.service_owner}}"
          - name: msg_id
            value: "{{tasks.trigger-orchestration-core.outputs.parameters.event_uuid}}"


  - name: edge-service-attributes
    inputs:
      parameters:
      - name: payload
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import os
        import sys

        payload = {{inputs.parameters.payload}}

        print(payload)

        result = {}
        result['nsmm.remote_gw_address'] = payload['vsi_info']['externalGwAddress']
        result['nsmm.allocated_subnet'] = payload['vsi_info']['internalVpnSubnets'][0]
        result['nsmm.vpn_net'] = payload['vsi_info']['internalVpnSubnets'][0]

        with open('/tmp/dict.txt', 'w') as f:
            json.dump(result, f)

    outputs:
      parameters:
      - name: dict
        valueFrom:
          path: /tmp/dict.txt
    
    
  - name: consume
    # Consumes a message from kafka broker of a matched event_uuid
    #
    # Parameters
    # kafka_topic: the topic to publish the message on (string)
    # kafka_ip: ipaddress of the kafka broker (string)
    # kafka_port: kafka broker port (number)
    # msg_id: the id of the message to look for (str)
    inputs:
      parameters:
      - name: kafka_topic
      - name: kafka_ip
      - name: kafka_port
      - name: msg_id
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import os
        import sys

        from kafka import KafkaConsumer
        from kafka.errors import KafkaError

        KAFKA_TOPIC = '{{inputs.parameters.kafka_topic}}'
        KAFKA_TIMEOUT = 10
        KAFKA_API_VERSION = (1, 1, 0)

        MSG_ID = "{{inputs.parameters.msg_id}}"
        payload = {}

        KAFKA_SERVER = "{}:{}".format("{{inputs.parameters.kafka_ip}}", "{{inputs.parameters.kafka_port}}")
        consumer = KafkaConsumer(bootstrap_servers=KAFKA_SERVER,
                                 client_id="aaa",
                                 enable_auto_commit=True,
                                 api_version=KAFKA_API_VERSION, group_id=MSG_ID)
        consumer.subscribe(pattern=KAFKA_TOPIC)

        for msg in consumer:
            # TODO: drain topic messages first so we do not consume stale messages
            payload = json.loads(msg.value.decode('utf-8', 'ignore'))
            sys.stdout.write('Received payload: %s \n' % payload)
            if payload.get('msg_id', '') == MSG_ID:
                sys.stdout.write('It is my message: %s \n' % payload)
                break

        with open('/tmp/payload.txt', 'w') as f:
            json.dump(payload, f)

    outputs:
      parameters:
      - name: payload
        valueFrom:
          path: /tmp/payload.txt
