# Copyright 2020 – 2021 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: issm-kafka
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: test-dep
      eventSourceName: issm-kafka
      eventName: intent
  triggers:
    - template:
        name: kafka-workflow-trigger
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                #
                # Workflow name is the event_uuid defined in the payload
                # (see event parameters below)
                #
                name: "OVERRIDE"
                labels:
                  #
                  # transaction_uuid lable contains the transaction uuid of
                  # bussiness flow. NOTE: there could be several instances with
                  # a same transaction uuid
                  #
                  transaction_uuid: OVERRIDE
              spec:
                entrypoint: handlerequest
                imagePullSecrets:
                - name: myregistrykey
                - name: 5gzorroregistrykey
                arguments:
                  parameters:
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # ISSM kafka bus
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: kafka_ip
                    value: 172.28.3.196
                  - name: kafka_port
                    value: 9092

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # DL kafka bus
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: kafka_dl_ip
                    value: 172.28.3.196
                  - name: kafka_dl_port
                    value: 9092

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # Discovery service
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: discovery_ip
                    value: 172.28.3.42
                  - name: discovery_port
                    value: 32000

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # Slicer service
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: slicer_ip
                    value: 172.28.3.42
                  - name: slicer_port
                    value: 31082

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # Payload parameters
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: operation
                    value: OVERRIDE

                  - name: category
                    value: OVERRIDE

                  - name: latitude
                    value: OVERRIDE
                  - name: longitude
                    value: OVERRIDE

                  - name: service_owner
                    value: OVERRIDE

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # Range e.g. 1200-1400
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: requested_price
                    value: OVERRIDE

                  - name: resourceSpecCharacteristic
                    value: OVERRIDE

                  - name: qos_parameters
                    value: OVERRIDE

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # operation == submit_bp
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: resources
                    value: OVERRIDE

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # Id of the transaction
                  # (N/A for submit_intent)
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: transaction_uuid
                    value: OVERRIDE

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # Id of the existing service
                  # to extend
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: service_id
                    value: OVERRIDE

                templates:
                - name: handlerequest
                  steps:
                  - - name: submit-intent
                      # It is assumed that this is the starting point of the transaction
                      # meaning that event_uuid here is the transaction_uuid
                      template: submit-intent-flow
                      when: "{{workflow.parameters.operation}} == \"submit_intent\""

                  - - name: submit-bp
                      template: submit-bp-flow
                      when: "{{workflow.parameters.operation}} == \"submit_bp\""

                - name: submit-intent-flow
                  dag:
                    tasks:
                    - name: smart-discovery-application
                      template: smart-discovery-application
                      arguments:
                        parameters:
                        - name: service_ip
                          value: "{{workflow.parameters.discovery_ip}}"
                        - name: service_port
                          value: "{{workflow.parameters.discovery_port}}"
                        - name: resourceSpecCharacteristic
                          value: "{{workflow.parameters.resourceSpecCharacteristic}}"
                        - name: category
                          value: "{{workflow.parameters.category}}"
                        - name: latitude
                          value: "{{workflow.parameters.latitude}}"
                        - name: longitude
                          value: "{{workflow.parameters.longitude}}"
                        - name: requested_price
                          value: "{{workflow.parameters.requested_price}}"

                    - name: send-resouces-to-optimizer
                      # publish discovered resources for the optimizer to consume
                      dependencies: [smart-discovery-application]
                      template: produce-message
                      arguments:
                        parameters:
                        - name: data
                          # note: transaction_uuid is the event_uuid passed to this flow
                          value: |
                            { "event_uuid": "{{workflow.name}}", "transaction_uuid": "{{workflow.name}}",
                              "resources": {{tasks.smart-discovery-application.outputs.result}},
                              "service_owner": "{{workflow.parameters.service_owner}}", "service_id": "{{workflow.parameters.service_id}}",
                              "category": "{{workflow.parameters.category}}", "qos_parameters": {{workflow.parameters.qos_parameters}} }
                        - name: kafka_topic
                          value: "issm-optimizer"

                - name: submit-bp-flow
                  dag:
                    tasks:

                    - name: highest-score-offer
                      templateRef:
                        name: workflow-base
                        template: jq-script
                      arguments:
                        parameters:
                        - name: json_str
                          value: "{{workflow.parameters.resources}}"
                        - name: jq_query
                          value: '.[0]'

                    - name: acquire
                      dependencies: [highest-score-offer]
                      # invokes acquire template for every entry in resources list
                      # waits for them to succeed and publishes status success for the
                      # service owner to consume
                      template: acquire
                      arguments:
                        parameters:
                        - name: product_id
                          value: "{{item.product_id}}"
                      withParam: "{{workflow.parameters.resources}}"

                    - name: resource-vsb
                      dependencies: [acquire]
                      templateRef:
                        name: workflow-base
                        template: jq-script
                      arguments:
                        parameters:
                        - name: json_str
                          value: "{{workflow.parameters.resources}}"
                        - name: jq_query
                          value: '.[0].Blueprint_name'

                    - name: product-id
                      dependencies: [acquire]
                      templateRef:
                        name: workflow-base
                        template: jq-script
                      arguments:
                        parameters:
                        - name: json_str
                          value: "{{workflow.parameters.resources}}"
                        - name: jq_query
                          value: '.[0].product_id'

                    - name: resource-id
                      dependencies: [acquire]
                      templateRef:
                        name: workflow-base
                        template: jq-script
                      arguments:
                        parameters:
                        - name: json_str
                          value: "{{workflow.parameters.resources}}"
                        - name: jq_query
                          value: '.[0].resource_id'

                    - name: slicer-create-vsd
                      dependencies: [resource-vsb, product-id, resource-id]
                      templateRef:
                        name: workflow-slice
                        template: create-descriptor
                      arguments:
                        parameters:
                        - name: slicer_ip
                          value: "{{workflow.parameters.slicer_ip}}"
                        - name: slicer_port
                          value: "{{workflow.parameters.slicer_port}}"
                        - name: tenant_name
                          value: "{{workflow.parameters.service_owner}}"
                        - name: blueprint_name
                          # TODO: offer should contain VSB_ID
                          value: "vCDN_edge_ICOM"
                        - name: parameters
                          value: "{{workflow.parameters.qos_parameters}}"

                    - name: slicer-create-vsi
                      dependencies: [slicer-create-vsd]
                      templateRef:
                        name: workflow-slice
                        template: create-instance
                      arguments:
                        parameters:
                        - name: slicer_ip
                          value: "{{workflow.parameters.slicer_ip}}"
                        - name: slicer_port
                          value: "{{workflow.parameters.slicer_port}}"
                        - name: tenant_name
                          value: "{{workflow.parameters.service_owner}}"
                        - name: vsd_id
                          value: "{{tasks.slicer-create-vsd.outputs.parameters.vsd_id}}"
                        - name: name
                          # TODO: offer should contain VSB_ID
                          value: "vCDN_edge_ICOM"
                        - name: userdata
                          value: |
                            { "product_id": "{{tasks.product-id.outputs.result}}",
                              "transaction_id": "{{workflow.parameters.transaction_uuid}}",
                              "vsi_id": "{{workflow.parameters.service_id}}" }

                    - name: slicer-poll
                      dependencies: [slicer-create-vsi]
                      templateRef:
                        name: workflow-slice
                        template: poll
                      arguments:
                        parameters:
                        - name: poll
                          value: "true"
                        - name: slicer_ip
                          value: "{{workflow.parameters.slicer_ip}}"
                        - name: slicer_port
                          value: "{{workflow.parameters.slicer_port}}"
                        - name: tenant_name
                          value: "{{workflow.parameters.service_owner}}"
                        - name: vsi_id
                          value: "{{tasks.slicer-create-vsi.outputs.parameters.vsi_id}}"
                        - name: jq_query
                          value: ".status"
                        - name: jq_query_value
                          value: "INSTANTIATED"
                        - name: timeout
                          value: 180

#                    - name: poll-timeout
#                      dependencies: [slicer-poll]
#                      template: fail
#                      when: "{{tasks.slicer-poll.outputs.parameters.status}} == \"TIMEOUT\""

                    - name: sla-event
                      dependencies: [slicer-poll]
                      # when: "{{tasks.slicer-poll.outputs.parameters.status}} != \"TIMEOUT\""
                      templateRef:
                        name: workflow-base
                        template: produce
                      arguments:
                        parameters:
                        - name: data
                          value: |
                            { "eventType": "new_SLA",
                              "transactionID": "{{workflow.parameters.transaction_uuid}}",
                              "productID": "{{tasks.product-id.outputs.result}}",
                              "resourceID": "{{tasks.resource-id.outputs.result}}",
                              "instanceID": "{{tasks.slicer-create-vsi.outputs.parameters.vsi_id}}",
                              "kafka_ip": "{{workflow.parameters.kafka_ip}}", "kafka_port": "{{workflow.parameters.kafka_port}}",
                              "topic": "isbp-topic-out"
                            }
                        - name: kafka_topic
                          value: "isbp-topic"
                        - name: kafka_ip
                          value: "{{workflow.parameters.kafka_dl_ip}}"
                        - name: kafka_port
                          value: "{{workflow.parameters.kafka_dl_port}}"


                - name: smart-discovery-application
                  inputs:
                    parameters:
                    - name: service_ip
                    - name: service_port
                    - name: resourceSpecCharacteristic
                    - name: category
                    - name: latitude
                    - name: longitude
                    - name: requested_price
                  script:
                    image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
                    command: [python]
                    source: |
                      import json
                      import requests
                      import sys
                      requested_price = str("{{inputs.parameters.requested_price}}")
                      price = requested_price.split('-')[0]
                      headers = {'Content-Type': 'application/json'}
                      # category: vnf
                      # resourceSpecCharacteristic: CDN
                      r = requests.get("http://{{inputs.parameters.service_ip}}:{{inputs.parameters.service_port}}/discoveroffer/"
                          "{{inputs.parameters.category}}_lat{{inputs.parameters.latitude}}_long{{inputs.parameters.longitude}}_" + str(price) + "_{{inputs.parameters.resourceSpecCharacteristic}}",
                          headers=headers)
                      # return offers
                      json.dump(r.json(), sys.stdout)

                - name: acquire
                  # acquire is devided into two sub-tasks:
                  # 1. the acquire operation itself
                  # 2. branch to inspect acquire status and either fail the flow
                  # or proceed as normal
                  inputs:
                    parameters:
                    - name: product_id
                  steps:
                    - - name: acquire-resource
                        template: acquire-simulator
                        arguments:
                          parameters:
                          - name: product_id
                            value: "{{inputs.parameters.product_id}}"

                    - - name: fail-flow
                        template: fail
                        when: "{{steps.acquire-resource.outputs.parameters.status}} == \"FAIL\""

                - name: acquire-simulator
                  # simulate a resource purchase with a return of a
                  # fail/success status
                  inputs:
                    parameters:
                    - name: product_id
                  script:
                    image: python:alpine3.6
                    command: [python]
                    source: |
                      import json
                      import random
                      import sys
                      status = "acquire_success"
                      json.dump({"product_id": "{{inputs.parameters.product_id}}", "status": status}, sys.stdout)
                      with open("/tmp/status.txt", "a") as myfile:
                          myfile.write(status)
                  outputs:
                    parameters:
                    - name: status
                      valueFrom:
                        path: /tmp/status.txt

                - name: fail
                  script:
                    image: debian:9.4
                    command: [bash]
                    source: |
                      exit 123

                - name: produce-message
                  inputs:
                    parameters:
                    - name: data
                    - name: kafka_topic
                  steps:
                    - - name: return-result
                        templateRef:
                          name: workflow-base
                          template: produce
                        arguments:
                          parameters:
                          - name: kafka_topic
                            value: "{{inputs.parameters.kafka_topic}}"
                          - name: kafka_ip
                            value: "{{workflow.parameters.kafka_ip}}"
                          - name: kafka_port
                            value: "{{workflow.parameters.kafka_port}}"
                          - name: data
                            value: "{{inputs.parameters.data}}"

          parameters:
            - src:
                #
                # event_uuid is treated as an instance uuid for this
                # flow instance
                dependencyName: test-dep
                dataKey: body.event_uuid
              dest: metadata.name

            - src:
                #
                # transaction_uuid is treated as the whole business trasaction
                # that can contain several flows (i.e. several event_uuids)
                #
                dependencyName: test-dep
                dataKey: body.transaction_uuid
              dest: metadata.labels.transaction_uuid

            - src:
                dependencyName: test-dep
                dataKey: body.operation
              dest: spec.arguments.parameters.8.value

            - src:
                dependencyName: test-dep
                dataKey: body.category
                value: DEFAULT
              dest: spec.arguments.parameters.9.value

            - src:
                dependencyName: test-dep
                dataKey: body.latitude
                value: DEFAULT
              dest: spec.arguments.parameters.10.value

            - src:
                dependencyName: test-dep
                dataKey: body.longitude
                value: DEFAULT
              dest: spec.arguments.parameters.11.value

            - src:
                dependencyName: test-dep
                dataKey: body.service_owner
                value: DEFAULT
              dest: spec.arguments.parameters.12.value

            - src:
                dependencyName: test-dep
                dataKey: body.requested_price
                value: DEFAULT
              dest: spec.arguments.parameters.13.value

            - src:
                dependencyName: test-dep
                dataKey: body.resourceSpecCharacteristic
                value: DEFAULT
              dest: spec.arguments.parameters.14.value

            - src:
                dependencyName: test-dep
                dataKey: body.qos_parameters
                value: DEFAULT
              dest: spec.arguments.parameters.15.value

            - src:
                dependencyName: test-dep
                dataKey: body.resources
                value: DEFAULT
              dest: spec.arguments.parameters.16.value

            - src:
                dependencyName: test-dep
                dataKey: body.transaction_uuid
              dest: spec.arguments.parameters.17.value

            - src:
                dependencyName: test-dep
                dataKey: body.service_id
              dest: spec.arguments.parameters.18.value
