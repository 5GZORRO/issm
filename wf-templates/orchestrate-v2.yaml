# Copyright 2020 - 2021 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-orchestrator
spec:
  templates:
  - name: trigger-orchestration
    # Sends an isntantiation request to the orchestration services of the domain
    # denoted by the 'resource_owner'. The message is being sent on the platform
    # kafka bus topic: issm-in-<resource_owner>.
    #
    # Parameters
    # resource_owner: operator name (e.g. operator-a) (str)
    # vsbName: the 'image' to instantiate
    # userdata: instantiation parameters
    # vsd_parameters: additional instantiation parameters
    #
    # Outputs
    # event_uuid: unique identifier of this orchestration request (str in
    #             uuid format)
    inputs:
      parameters:
      - name: resource_owner
      - name: vsbName
      - name: userdata
      - name: vsd_parameters
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys
        import uuid

        from kafka import KafkaProducer
        from kafka.errors import KafkaError

        KAFKA_TOPIC = "issm-in-{{inputs.parameters.resource_owner}}"
        KAFKA_TIMEOUT = 10
        KAFKA_API_VERSION = (1, 1, 0)

        event_uuid = str(uuid.uuid4()).replace('-','')

        payload = {
            "event_uuid": event_uuid,
            "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
            "operation": "{{workflow.parameters.operation}}",
            "sub_operation": "ORCHESTRATE",
            "elma_url": "{{workflow.parameters.elma_url}}",
            "vsbName": "{{inputs.parameters.vsbName}}",
            "service_owner": "{{workflow.parameters.service_owner}}",
            "resource_owner": "{{inputs.parameters.resource_owner}}",
            "userdata": {{inputs.parameters.userdata}},
            "vsd_parameters": {{inputs.parameters.vsd_parameters}}
        }
        

        KAFKA_SERVER = "{}".format("{{workflow.parameters.kafka}}")
        producer = KafkaProducer(bootstrap_servers=KAFKA_SERVER,
                                 api_version=KAFKA_API_VERSION,
                                 value_serializer=lambda v: json.dumps(v).encode('utf-8'))

        t = producer.send(KAFKA_TOPIC, payload)
        # Block for 'synchronous' send; set timeout on X seconds
        try:
            t.get(timeout=KAFKA_TIMEOUT)
        except KafkaError as ke:
            raise ke
        print ("0")

        with open('/tmp/event_uuid.txt', 'w') as f:
            f.write(str(event_uuid))
    outputs:
      parameters:
      - name: event_uuid
        valueFrom:
          path: /tmp/event_uuid.txt


  - name: trigger-orchestration-terminate
    # Sends a termination request to the orchestration services of the domain
    # denoted by the 'resource_owner'. The message is being sent on the platform
    # kafka bus topic: issm-in-<resource_owner>.
    #
    # Parameters
    # resource_owner: operator name (e.g. operator-a) (str)
    # vsi_id: instance id (str)
    #
    # Outputs
    # event_uuid: unique identifier of this orchestration request (str in
    #             uuid format)
    inputs:
      parameters:
      - name: resource_owner
      - name: vsi_id
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-orchestration
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}", "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                  "operation": "{{workflow.parameters.operation}}", "sub_operation": "ORCHESTRATE_TERMINATE",
                  "elma_url": "{{workflow.parameters.elma_url}}",
                  "service_owner": "{{workflow.parameters.service_owner}}",
                  "resource_owner": "{{inputs.parameters.resource_owner}}",
                  "vsi_id": "{{inputs.parameters.vsi_id}}"
                }
            - name: kafka_topic
              value: "issm-in-{{inputs.parameters.resource_owner}}"
    outputs:
      parameters:
      - name: event_uuid
        valueFrom:
          parameter: "{{steps.event-uuid.outputs.result}}"
