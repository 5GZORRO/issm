apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: orchestration-template
spec:
  templates:
  - name: handle-orchestration
    dag:
      tasks:
      - name: mec-cnmp-create-nssi
        template: mec-cnmp-create-nssi
        arguments:
          parameters:
          - name: mec_cnmp_ip
            value: 1.2.3.4
          - name: mec_cnmp_port
            value: "30055"

          - name: sst
            value: "1"
          - name: sd
            value: "112233"
          - name: cluster_core
            value: cluster-1
          - name: cluster_edge
            value: cluster-2

          - name: network_name
            value: gilan
          - name: network_master
            value: ens3
          - name: network_range
            value: 10.20.0.0/24
          - name: network_start
            value: 10.20.0.2
          - name: network_end
            value: 10.20.0.50

      - name: mec-cnmp-poll
        dependencies: [mec-cnmp-create-nssi]
        template: poll
        arguments:
          parameters:
          - name: poll
            value: "true"
          - name: mec_cnmp_ip
            value: 1.2.3.4
          - name: mec_cnmp_port
            value: "30055"
          - name: nssi_id
            value: "{{tasks.mec-cnmp-create-nssi.outputs.parameters.nssi_id}}"
          - name: jq_query
            value: ".phase"
          - name: jq_query_value
            value: "Succeeded"
          - name: timeout
            value: 180

      - name: poll-timeout
        dependencies: [mec-cnmp-poll]
        templateRef:
          name: workflow-base
          template: fail
        when: "{{tasks.mec-cnmp-poll.outputs.parameters.status}} == \"TIMEOUT\""

      - name: sla-event
        dependencies: [poll-timeout]
        when: "{{tasks.mec-cnmp-poll.outputs.parameters.status}} != \"TIMEOUT\""
        templateRef:
          name: workflow-base
          template: produce
        arguments:
          parameters:
          - name: data
            value: |
              { "eventType": "new_SLA",
                "transactionID": "{{workflow.parameters.transaction_uuid}}",
                "productID": "{{workflow.parameters.product_id}}",
                "resourceID": "{{workflow.parameters.resource_id}}",
                "instanceID": "{{tasks.mec-cnmp-create-nssi.outputs.parameters.nssi_id}}",
                "kafka_ip": "{{workflow.parameters.kafka_ip}}", "kafka_port": "{{workflow.parameters.kafka_port}}",
                "topic": "isbp-topic-out"
              }
          - name: kafka_topic
            value: "isbp-topic"
          - name: kafka_ip
            value: "{{workflow.parameters.kafka_dl_ip}}"
          - name: kafka_port
            value: "{{workflow.parameters.kafka_dl_port}}"

  - name: mec-cnmp-create-nssi
    inputs:
      parameters:
      - name: mec_cnmp_ip
      - name: mec_cnmp_port

      - name: sst
      - name: sd

      - name: cluster_core
      - name: cluster_edge

      - name: network_name
      - name: network_master
      - name: network_range
      - name: network_start
      - name: network_end

    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [sh]
      source: |
        generate_post_instance_create()
        {
          cat <<EOF
        {
          "cluster_core": "{{inputs.parameters.cluster_core}}",
          "cluster_edge": "{{inputs.parameters.cluster_edge}}",
          "sst": "{{inputs.parameters.sst}}",
          "sd": "{{inputs.parameters.sd}}",
          "network_name": "{{inputs.parameters.network_name}}",
          "network_master": "{{inputs.parameters.network_master}}",
          "network_range": "{{inputs.parameters.network_range}}",
          "network_start": "{{inputs.parameters.network_start}}",
          "network_end": "{{inputs.parameters.network_end}}"
        }
        EOF
        }
        echo "Create instance.."
        nssi_id="$(curl --data "$(generate_post_instance_create)" -X POST http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/subnetslice --header "Content-Type:application/json" 2>/dev/null | jq -r .subnet_name)"
        echo $nssi_id > /tmp/id.txt
    outputs:
      parameters:
      - name: nssi_id
        valueFrom:
          path: /tmp/id.txt

  - name: poll
    inputs:
      parameters:
      - name: poll
      - name: mec_cnmp_ip
      - name: mec_cnmp_port
      - name: nssi_id
      - name: jq_query
      - name: jq_query_value
      - name: timeout
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [sh]
      source: |
        if [ {{inputs.parameters.poll}} = "true" ]; then
          i=0
          until [ "$(curl http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/subnetslice/{{inputs.parameters.nssi_id}} | jq -r {{inputs.parameters.jq_query}})" == "{{inputs.parameters.jq_query_value}}" -o $i -gt {{inputs.parameters.timeout}} ]; do
             echo "Poll wait for nssi_id: {{inputs.parameters.nssi_id}}.. (1 sec)"
             sleep 1
             i=$((i+1))
          done
          if [ $i -gt {{inputs.parameters.timeout}} ]; then
            echo "TIMEOUT"
            echo "TIMEOUT" > /tmp/status.txt
          else
            echo "$(curl http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/subnetslice/{{inputs.parameters.nssi_id}} | jq -r {{inputs.parameters.jq_query}})" > /tmp/status.txt
          fi
        else  
          echo "$(curl http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/subnetslice/{{inputs.parameters.nssi_id}} | jq -r {{inputs.parameters.jq_query}})" > /tmp/status.txt
        fi
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status.txt
