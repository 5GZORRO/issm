# Copyright 2020 - 2021 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################
#
# Business flow Scenario 2:
# =========================
#
# Scenario 2 deals with instantiating a SW and scaling it out by selecting the
# best 3rd party operator that fulfils its sizing demands.
#
# Instantiate. Instantiation of an already purshased SW offer
#
# Parameters:
#
#     product_id: the DID of the SW offer that is already owned by the stakeholder (e.g. 6wG2v3x8sBduWUNWMB2YBL)
#     service_owner: stakeholder name (e.g. operator-a)
#     place: the location of where this instantiation is going to be (PO TMF format)
#
# Steps:
#
# * Retrieve SW offer of product_id and service_owner (stakeholder); extract data (e.g. VSB)
#
# * Orchestrate the instantiation of the SW at the stakeholder premises and return the instance_id
#
# * Send SLA event to start SLA monitoring
#   SLA event includes: transaction_uuid, product_id, instance_id, sla_id, place
#                       (as denoted in input parameter)
#
# ==============================================================================
#
# Scaleout. Scaleout of an existing service - into a best 3rd party edge premises
#           that fulfils service's sizing demands
#
# Parameters:
#
#     product_id: the DID of the SW offer to scaleout (e.g. 6wG2v3x8sBduWUNWMB2YBL)
#     service_owner: stakeholder name (e.g. operator-a)
#     service_id: the existing running instance id to be scaled out
#     place: the location of where we would like to scaleout (PO TMF format)
#
# Steps:
#
# * Retrieve SW offer out from product_id and service_owner (stakeholder); extract data
#   (e.g. CPU, RAM, Storage + VSB)
#
# * Build sizing intent out from the above extracted data
#
# * Discover IaaS Edge resource offers based on requirements that include
#     - location
#     - sizings (extracted above)
#     e.g. for a discovery query: "storage 96 GB 2730 MB of ram edge, barcelona spain"
#
# * Send offers to ISSM-O
#
# * Retrieve best resource offer from ISSM-O
#
# * Aquire IaaS resource offer from marketplace
#
# * Orchestration:
#
#   - (NSSO) Asymetric-orchestrate, using the stakeholder orchestration stack to
#     orchestrate the scaleout operation of an instance id denoted by service_id,
#     VSB in product_id PO - into 3rd party premises (as denoted in the
#     selected IaaS resource) and connect it to the stakeholder's instance id
#
#   - (MEC-CNMP) UPF is deployed into 3rd party domain (i.e. 3rd party namespace)
#     and get connected to stakeholder's core
#
# * SLA event includes: transaction_uuid, product_id, instance_id, sla_id,
#                       location (of IaaS resource)
# 
###############################################################################

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: scenario-2-submit
spec:
  templates:
  - name: handle-submit
    # Entry point of the scenario
    steps:
    - - name: handle-instantiate
        template: handle-submit-instantiate
        when: "{{workflow.parameters.operation}} == \"instantiate\""

    - - name: handle-scaleout
        template: handle-submit-scaleout
        when: "{{workflow.parameters.operation}} == \"scaleout\""

  - name: handle-submit-instantiate
    steps:
    # Branching point according to internal state
    # of the transaction
    steps:
    - - name: handle-new-intent-instantiate
        template: handle-new-intent-instantiate
        when: "{{workflow.parameters.sub_operation}} == \"new_intent\""

    - - name: handle-orchestration-instantiate
        templateRef:
          name: scenario-2-orchestration-template
          template: orchestration-instantiate
        when: "{{workflow.parameters.sub_operation}} == \"submit_orchestration\""

  - name: handle-submit-scaleout
    # Branching point according to internal state
    # of the transaction
    steps:
    - - name: handle-new-intent
        template: handle-new-intent
        when: "{{workflow.parameters.sub_operation}} == \"new_intent\""

    - - name: handle-best-offers
        template: handle-best-offers
        when: "{{workflow.parameters.sub_operation}} == \"submit_bp\""

    - - name: handle-orchestration
        templateRef:
          name: scenario-2-orchestration-template
          template: orchestration-scaleout
        when: "{{workflow.parameters.sub_operation}} == \"submit_orchestration\""


  - name: handle-new-intent-instantiate
    dag:
      tasks:
      - name: get-product-offer-from-catalog
        template: get-product-offer-from-catalog
        arguments:
          parameters:
          - name: product_id
            value: "{{workflow.parameters.product_id}}"

      - name: trigger-orchestration-instantiate
        dependencies: [get-product-offer-from-catalog]
        template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            # set this to stakeholder name so that orch request is routed to it
            value: "{{workflow.parameters.service_owner}}"
          - name: resource_vsb
            value: "{{tasks.get-product-offer-from-catalog.outputs.parameters.vsbName}}"
          - name: product_id
            value: "{{workflow.parameters.product_id}}"
          - name: sla_id
            # TODO: from where do we take SLA ID?
            value: "123"
          - name: place
            value: "{{workflow.parameters.place}}"
            

  - name: handle-new-intent
    dag:
      tasks:
      - name: get-product-offer-from-catalog
        template: get-product-offer-from-catalog
        arguments:
          parameters:
          - name: product_id
            value: "{{workflow.parameters.product_id}}"

      - name: build-intent-query
        dependencies: [get-product-offer-from-catalog]
        template: build-intent-query
        arguments:
          parameters:
          - name: place
            value: "{{workflow.parameters.place}}"
          - name: cpu_max
            value: "{{tasks.get-product-offer-from-catalog.outputs.parameters.cpu_max}}"
          - name: mem_max
            value: "{{tasks.get-product-offer-from-catalog.outputs.parameters.mem_max}}"
          - name: mem_unit
            value: "{{tasks.get-product-offer-from-catalog.outputs.parameters.mem_unit}}"
          - name: storage_max
            value: "{{tasks.get-product-offer-from-catalog.outputs.parameters.storage_max}}"
          - name: storage_unit
            value: "{{tasks.get-product-offer-from-catalog.outputs.parameters.storage_unit}}"

      - name: srds-service
        template: srds-service
        dependencies: [build-intent-query]
        arguments:
          parameters:
          - name: service_ip
            value: "{{workflow.parameters.discovery_ip}}"
          - name: service_port
            value: "{{workflow.parameters.discovery_port}}"
          - name: intent_query
            value: "{{tasks.build-intent-query.outputs.result}}"

      - name: send-resouces-to-optimizer
        # publish discovered resources for the optimizer to consume
        dependencies: [srds-service]
        templateRef:
          name: workflow-base
          template: publish-on-kafka
        arguments:
          parameters:
          - name: data
            value: |
              { "transaction_uuid": "{{workflow.name}}", "topic": "issm-in-{{workflow.parameters.service_owner}}", 
                "resources": {{tasks.srds-service.outputs.result}}, "scenario": "{{workflow.parameters.scenario}}",
                "operation": "{{workflow.parameters.operation}}", "sub_operation": "submit_bp",
                "service_owner": "{{workflow.parameters.service_owner}}", "elma_url": "{{workflow.parameters.elma_url}}",
                "product_id": "{{workflow.parameters.product_id}}", "catalogue_url": "{{workflow.parameters.catalogue_url}}",
                "service_id": "{{workflow.parameters.service_id}}"}
          - name: kafka_topic
            value: issm-optimizer

  - name: handle-best-offers
    dag:
      tasks:
      - name: get-product-offer-from-catalog
        template: get-product-offer-from-catalog
        arguments:
          parameters:
          - name: product_id
            value: "{{workflow.parameters.product_id}}"

      - name: handle-best-offers
        # this step is mainly for pretty print
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{workflow.parameters.resources}}"
          - name: jq_query
            value: '.'

      - name: loop-best-offers-resource
        # loop through 'resource' type offers
        dependencies: [handle-best-offers, get-product-offer-from-catalog]
        template: loop-best-offers
        arguments:
          parameters:
          - name: best_offer
            value: "{{item}}"
          - name: resource_vsb
            value: "{{tasks.get-product-offer-from-catalog.outputs.parameters.vsbName}}"
        withParam: "{{workflow.parameters.resources}}"

  - name: loop-best-offers
    inputs:
      parameters:
      - name: best_offer
      - name: resource_vsb
    dag:
      tasks:
      - name: resource-service-owner
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_object.productSpecification.relatedParty[0].name'

      - name: process-mno-name
        dependencies: [resource-service-owner]
        templateRef:
          name: workflow-base
          template: correct-mno-name
        arguments:
          parameters:
          - name: mno_name
            value: "{{tasks.resource-service-owner.outputs.result}}"

      - name: resource-location
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_object.place[0]'

      - name: acquire
        dependencies: [process-mno-name, resource-location]
        # invokes acquire template for every entry in resources list
        # waits for them to succeed and publishes status success for the
        # service owner to consume
        template: acquire
        arguments:
          parameters:
          - name: product_id
            value: "{{workflow.parameters.product_id}}"

      - name: trigger-orchestration-scaleout
        dependencies: [acquire]
        template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            value: "{{tasks.process-mno-name.outputs.result}}"
          - name: resource_vsb
            value: "{{inputs.parameters.resource_vsb}}"
          - name: product_id
            value: "{{workflow.parameters.product_id}}"
          - name: sla_id
            value: "123"
          - name: place
            value: "{{tasks.resource-location.outputs.result}}"

  - name: build-intent-query
    inputs:
      parameters:
      - name: place
      - name: cpu_max
      - name: mem_max
      - name: mem_unit
      - name: storage_max
      - name: storage_unit
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import sys
        # intent/$(urlencode 'storage 96 GB ram 2730 MB edge Barcelona'))
        location = {{inputs.parameters.place}}['city']
        cpu_max = str("{{inputs.parameters.cpu_max}}")
        mem_max = str("{{inputs.parameters.mem_max}}")
        mem_unit = str("{{inputs.parameters.mem_unit}}")

        storage_max = str("{{inputs.parameters.storage_max}}")
        # TODO: remove once IaaS edge resource matches storage of VNF PO 
        storage_max = "96"
        storage_unit = str("{{inputs.parameters.storage_unit}}")
        
        sys.stdout.write(cpu_max + " cores" + " storage " + storage_max + " " + storage_unit + " ram " + mem_max + " " + mem_unit + " edge " +  location)

  - name: srds-service
    inputs:
      parameters:
      - name: service_ip
      - name: service_port
      - name: intent_query
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys
        import urllib
        import urllib.parse

        headers = {'Content-Type': 'application/json'}
        intent_query = str("{{inputs.parameters.intent_query}}")
        iq = urllib.parse.quote(intent_query)
        r = requests.get("http://{{inputs.parameters.service_ip}}:{{inputs.parameters.service_port}}/intent/" + iq, headers=headers)
        offers = r.json()
        for e in offers:
            try:
                # TODO: kafka produce does not like json bool true/false
                del e['offer_object']['serviceLevelAgreement']['approved']
            except:
                pass
        # return all
        json.dump(offers, sys.stdout)

  - name: acquire
    # acquire is devided into two sub-tasks:
    # 1. the acquire operation itself
    # 2. branch to inspect acquire status and either fail the flow
    # or proceed as normal
    inputs:
      parameters:
      - name: product_id
    steps:
      - - name: acquire-resource
          template: acquire-simulator
          arguments:
            parameters:
            - name: product_id
              value: "{{inputs.parameters.product_id}}"

      - - name: fail-flow
          templateRef:
            name: workflow-base
            template: fail
          when: "{{steps.acquire-resource.outputs.parameters.status}} == \"FAIL\""

  - name: acquire-simulator
    # simulate a resource purchase with a return of a
    # fail/success status
    inputs:
      parameters:
      - name: product_id
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import random
        import sys
        status = "acquire_success"
        json.dump({"product_id": "{{inputs.parameters.product_id}}", "status": status}, sys.stdout)
        with open("/tmp/status.txt", "a") as myfile:
            myfile.write(status)
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status.txt

  - name: trigger-orchestration
    inputs:
      parameters:
      - name: resource_owner
      - name: resource_vsb
      - name: product_id
      - name: sla_id
      - name: place
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-orchestration
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}", "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                  "operation": "{{workflow.parameters.operation}}", "sub_operation": "submit_orchestration",
                  "place": {{inputs.parameters.place}},
                  "scenario": "{{workflow.parameters.scenario}}", "elma_url": "{{workflow.parameters.elma_url}}",
                  "resource_vsb": "{{inputs.parameters.resource_vsb}}", "product_id": "{{inputs.parameters.product_id}}",
                  "service_owner": "{{workflow.parameters.service_owner}}", "service_id": "{{workflow.parameters.service_id}}",
                  "resource_owner": "{{inputs.parameters.resource_owner}}",
                  "sla_id": "{{inputs.parameters.sla_id}}" }
            - name: kafka_topic
              value: "issm-in-{{inputs.parameters.resource_owner}}"

  - name: get-product-offer-from-catalog
    inputs:
      parameters:
      - name: product_id
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import re
        import requests
        import sys

        REGEX = re.compile('.*([0-9]+).*')

        def find(l, predicate):
            """
            util method
            """
            results = [x for x in l if predicate(x)]
            return results[0] if len(results) > 0 else None

        headers = {'Content-Type': 'application/json'}
        r = requests.get("{{workflow.parameters.catalogue_url}}/tmf-api/productCatalogManagement/v4/productOffering/{{inputs.parameters.product_id}}",
            headers=headers)
        json.dump(r.json(), sys.stdout)
        sys.stdout.write('\n')

        try:
            category = r.json()['category'][0]['name']
            if category != "VNF":
                raise Exception('*** PO must be VNF ***')
        except:
            raise
        href = r.json()['productSpecification']['href']
        r = requests.get(str(href), headers=headers)
        json.dump(r.json(), sys.stdout)
        sys.stdout.write('\n')

        href = r.json()['resourceSpecification'][0]['href']
        r = requests.get(str(href), headers=headers)
        json.dump(r.json(), sys.stdout)
        sys.stdout.write('\n')

        rsc_list = r.json()[0]['resourceSpecCharacteristic']

        # 2. vCPU Requirements
        element = find(rsc_list, lambda e: e.get('name', '') == 'vCPU Requirements')
        if not element:
            raise Exception("*** Unable to find 'vCPU Requirements' ***")

        # min
        min = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'min-vCPU')
        if not min:
            raise Exception("*** Unable to find 'min-vCPU' ***")
        cpu_min = min['value']['value']

        # max
        max = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'max-vCPU')
        if not max:
            raise Exception("*** Unable to find 'max-vCPU' ***")
        cpu_max = max['value']['value']

        sys.stdout.write('cpu_min/max: "%s, %s" \n' % (cpu_min, cpu_max))


        # 3. Virtual Memory Requirements
        element = find(rsc_list, lambda e: e.get('name', '') == 'Virtual Memory Requirements')
        if not element:
            raise Exception("*** Unable to find 'Virtual Memory Requirements' ***")

        # min
        min = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'min-virtual-memory')
        if not min:
            raise Exception("*** Unable to find 'min-virtual-memory' ***")
        mem_min = min['value']['value']

        # max
        max = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'max-virtual-memory')
        if not max:
            raise Exception("*** Unable to find 'max-virtual-memory' ***")
        mem_max = max['value']['value']

        sys.stdout.write('mem_min/max: "%s, %s" \n' % (mem_min, mem_max))

        # 4. retrieve Storage Requirements
        element = find(rsc_list, lambda e: e.get('name', '') == 'Storage Requirements')
        if not element:
            raise Exception("*** Unable to find 'Storage Requirements' ***")

        # min
        min = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'min-storage')
        if not min:
            raise Exception("*** Unable to find 'min-storage' ***")
        storage_min = min['value']['value']

        # max
        max = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'max-storage')
        if not max:
            raise Exception("*** Unable to find 'max-storage' ***")
        storage_max = max['value']['value']

        sys.stdout.write('storage_min/max: "%s, %s" \n' % (storage_min, storage_max))

        r = requests.get("{{workflow.parameters.catalogue_url}}/tmf-api/productCatalogManagement/v4/productOfferingStatus/{{inputs.parameters.product_id}}",
            headers=headers)
        json.dump(r.json(), sys.stdout)
        sys.stdout.write('\n')
        did = r.json()['did']

        #for r in rsc_list:
        #  if r['name'] == 'vsdName':
        #    vsdName = r['resourceSpecCharacteristicValue'][0]['value']['value']
        #    sys.stdout.write('vsdName: %s \n' % vsdName)
        #    break

        with open('/tmp/vsbName.txt', 'w') as f:
            f.write(str("vCDN_edge_ICOM"))

        with open('/tmp/mem_unit.txt', 'w') as f:
            # TODO: change to GB once value is updated in PO
            f.write(str("MB"))

        with open('/tmp/mem_min.txt', 'w') as f:
            f.write(str(mem_min))
        with open('/tmp/mem_max.txt', 'w') as f:
            f.write(str(mem_max))

        with open('/tmp/cpu_min.txt', 'w') as f:
            f.write(str(cpu_min))
        with open('/tmp/cpu_max.txt', 'w') as f:
            f.write(str(cpu_max))

        with open('/tmp/storage_unit.txt', 'w') as f:
            f.write(str("GB"))

        with open('/tmp/storage_min.txt', 'w') as f:
            f.write(str(storage_min))
        with open('/tmp/storage_max.txt', 'w') as f:
            f.write(str(storage_max))

        with open('/tmp/did.txt', 'w') as f:
            f.write(str(did))

    outputs:
      parameters:
      - name: vsbName
        valueFrom:
          path: /tmp/vsbName.txt

      - name: mem_unit
        valueFrom:
          path: /tmp/mem_unit.txt

      - name: mem_min
        valueFrom:
          path: /tmp/mem_min.txt
      - name: mem_max
        valueFrom:
          path: /tmp/mem_max.txt

      - name: cpu_min
        valueFrom:
          path: /tmp/cpu_min.txt
      - name: cpu_max
        valueFrom:
          path: /tmp/cpu_max.txt

      - name: storage_unit
        valueFrom:
          path: /tmp/storage_unit.txt

      - name: storage_min
        valueFrom:
          path: /tmp/storage_min.txt
      - name: storage_max
        valueFrom:
          path: /tmp/storage_max.txt

      - name: did
        valueFrom:
          path: /tmp/did.txt
