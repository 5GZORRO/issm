# Copyright 2021 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: instantiate-scaleout-terminate
  # Contains templates to forward instantiate, scaleout and terminate requests.
  # The transaction ID remains the same and the sub operation is being set to
  # its proper value based on the main operation.
spec:
  templates:
  - name: terminate
    inputs:
      parameters:
      - name: issm_api_url
      - name: kafka_dl
    dag:
      tasks:
      - name: trigger-terminate
        template: trigger-terminate
        arguments:
          parameters:
          - name: service_owner
            value: "{{workflow.parameters.service_owner}}"

          - name: productOrder
            value: "{{workflow.parameters.productOrder}}"
          - name: productOrderStatusTransaction
            value: "{{workflow.parameters.productOrderStatusTransaction}}"
          - name: statusInstance
            value: "{{workflow.parameters.statusInstance}}"

          - name: issm_api_url
            value: "{{inputs.parameters.issm_api_url}}"
          - name: kafka_dl
            value: "{{inputs.parameters.kafka_dl}}"


  - name: scaleout
    inputs:
      parameters:
      - name: kafka_dl
      - name: order_id
      - name: elma_url
      - name: catalogue_url
      - name: trmf_url
      - name: srsd_url
      - name: issm_api_url
      - name: domain_related_party_did
      - name: snfvo_data
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys
        import uuid

        from kafka import KafkaProducer
        from kafka.errors import KafkaError

        KAFKA_TOPIC = "issm-in-{{workflow.parameters.service_owner}}"
        KAFKA_TIMEOUT = 10
        KAFKA_API_VERSION = (1, 1, 0)

        event_uuid = str(uuid.uuid4()).replace('-','')

        sys.stdout.write('event_uuid: "%s"\nKAFKA_TOPIC: "%s"\n' %
                          (event_uuid, KAFKA_TOPIC))

        payload = {
            "event_uuid": event_uuid,
            "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
            "operation": "scaleout", "sub_operation": "SCALEOUT_SERVICE",
            "place": {{workflow.parameters.place}},
            "service_owner": "{{workflow.parameters.service_owner}}",
            "order_id": "{{inputs.parameters.order_id}}",
            "category": "{{workflow.parameters.category}}",
            "elma_url": "{{inputs.parameters.elma_url}}",
            "catalogue_url": "{{inputs.parameters.catalogue_url}}",
            "kafka_dl": "{{inputs.parameters.kafka_dl}}",
            "trmf_url": "{{inputs.parameters.trmf_url}}",
            "srsd_url": "{{inputs.parameters.srsd_url}}",
            "issm_api_url": "{{inputs.parameters.issm_api_url}}",
            "domain_related_party_did": "{{inputs.parameters.domain_related_party_did}}",
            "snfvo_data": {{inputs.parameters.snfvo_data}}
        }

        sys.stdout.write('payload: %s\n' % payload)

        KAFKA_SERVER = "{}".format("{{workflow.parameters.kafka}}")
        producer = KafkaProducer(bootstrap_servers=KAFKA_SERVER,
                                 api_version=KAFKA_API_VERSION,
                                 value_serializer=lambda v: json.dumps(v).encode('utf-8'))

        t = producer.send(KAFKA_TOPIC, payload)
        # Block for 'synchronous' send; set timeout on X seconds
        try:
            t.get(timeout=KAFKA_TIMEOUT)
        except KafkaError as ke:
            raise ke
        print ("0")

        with open('/tmp/event_uuid.txt', 'w') as f:
            f.write(str(event_uuid))
    outputs:
      parameters:
      - name: event_uuid
        valueFrom:
          path: /tmp/event_uuid.txt

  - name: instantiate
    inputs:
      parameters:
      - name: kafka_dl
      - name: order_id
      - name: elma_url
      - name: catalogue_url
      - name: trmf_url
      - name: srsd_url
      - name: issm_api_url
      - name: domain_related_party_did
      - name: snfvo_data
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys
        import uuid

        from kafka import KafkaProducer
        from kafka.errors import KafkaError

        KAFKA_TOPIC = "issm-in-{{workflow.parameters.service_owner}}"
        KAFKA_TIMEOUT = 10
        KAFKA_API_VERSION = (1, 1, 0)

        event_uuid = str(uuid.uuid4()).replace('-','')

        sys.stdout.write('event_uuid: "%s"\nKAFKA_TOPIC: "%s"\n' %
                          (event_uuid, KAFKA_TOPIC))

        payload = {
            "event_uuid": event_uuid,
            "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
            "operation": "instantiate", "sub_operation": "INSTANTIATE_SERVICE",
            "kafka_dl": "{{inputs.parameters.kafka_dl}}",
            "service_owner": "{{workflow.parameters.service_owner}}",
            "order_id": "{{inputs.parameters.order_id}}",
            "category": "{{workflow.parameters.category}}",
            "elma_url": "{{inputs.parameters.elma_url}}",
            "catalogue_url": "{{inputs.parameters.catalogue_url}}",
            "trmf_url": "{{inputs.parameters.trmf_url}}",
            "srsd_url": "{{inputs.parameters.srsd_url}}",
            "issm_api_url": "{{inputs.parameters.issm_api_url}}",
            "domain_related_party_did": "{{inputs.parameters.domain_related_party_did}}",
            "snfvo_data": {{inputs.parameters.snfvo_data}},
            "place": {{workflow.parameters.place}},
            "app_topology": {{workflow.parameters.app_topology}}
        }

        sys.stdout.write('payload: %s\n' % payload)

        KAFKA_SERVER = "{}".format("{{workflow.parameters.kafka}}")
        producer = KafkaProducer(bootstrap_servers=KAFKA_SERVER,
                                 api_version=KAFKA_API_VERSION,
                                 value_serializer=lambda v: json.dumps(v).encode('utf-8'))

        t = producer.send(KAFKA_TOPIC, payload)
        # Block for 'synchronous' send; set timeout on X seconds
        try:
            t.get(timeout=KAFKA_TIMEOUT)
        except KafkaError as ke:
            raise ke
        print ("0")

        with open('/tmp/event_uuid.txt', 'w') as f:
            f.write(str(event_uuid))
    outputs:
      parameters:
      - name: event_uuid
        valueFrom:
          path: /tmp/event_uuid.txt

  - name: trigger-terminate
    inputs:
      parameters:
      - name: issm_api_url
      - name: kafka_dl
      - name: service_owner
      - name: productOrder
      - name: productOrderStatusTransaction
      - name: statusInstance

    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-terminate
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}",
                  "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                  "operation": "terminate", "sub_operation": "TERMINATE_SERVICE",
                  "service_owner": "{{inputs.parameters.service_owner}}",
                  "kafka_dl": "{{inputs.parameters.kafka_dl}}",
                  "issm_api_url": "{{inputs.parameters.issm_api_url}}",
                  "productOrder": {{workflow.parameters.productOrder}},
                  "productOrderStatusTransaction": {{workflow.parameters.productOrderStatusTransaction}},
                  "statusInstance": {{workflow.parameters.statusInstance}},
                }
            - name: kafka_topic
              value: "issm-in-{{inputs.parameters.service_owner}}"