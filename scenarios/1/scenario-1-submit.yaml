# Copyright 2020 - 2021 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################
#
# Business flow: Scenario 1:
# ============================
#
# Starting point of a business flow that instantiates/scalesout a SW bundle
#
# Instantiate. Instantiation of a SW bundled offer
#
# * Discover SW bundled offer based on requirements that include
#     - location
#     - costs
#     - SW category (e.g. CDN)
#     - QoS
#     e.g. "Barcelona Spain, vCDN service with max. users 10, total price: 135 euros"
#
# * Retrieve best ranked offer
#
# * Aquire resource offer from marketplace
# 
# * Orchestrate the instantiation of the SW at the offer's owner premises
#
# * Send SLA event to start SLA monitoring
#
# Scaleout. Scaleout of SW bundled offer to 3rd party premises
# 
# * Discover SW bundled offer based on requirements that include
#     - location
#     - costs
#     - SW category (e.g. CDN)
#     - QoS
#     e.g. "Barcelona Spain, vCDN service with max. users 10, total price: 135 euros"
#
# * Retrieve best ranked offer
#
# * Aquire resource offer from marketplace
# 
# * (NSSO) Asymetric-orchestrate, using the stakeholder orchestration stack to
#   orchestrate scaleout operation of an instance id denoted by service_id - into
#   3rd party premises (as denoted in the selected SW offer)
#
# * (MEC-CNMP) TBD
#
# * (TBD) SLA event
# 
###############################################################################

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: scenario-1-submit
spec:
  templates:
  - name: handle-submit
    # Entry point of the scenario
    steps:
    - - name: handle-instantiate
        template: handle-submit-instantiate
        when: "{{workflow.parameters.operation}} == \"instantiate\""

    - - name: handle-scaleout
        template: handle-submit-scaleout
        when: "{{workflow.parameters.operation}} == \"scaleout\""

  - name: handle-submit-instantiate
    steps:
    - name: print-message
      template: whalesay
      arguments:
        parameters:
        - name: message
          value: "Instantiate not supported at this moment"

  - name: handle-submit-scaleout
    steps:
    - - name: handle-new-intent
        template: handle-new-intent
        when: "{{workflow.parameters.sub_operation}} == \"new_intent\""

    - - name: handle-best-offers
        template: handle-best-offers
        when: "{{workflow.parameters.sub_operation}} == \"submit_bp\""

    - - name: handle-orchestration
        templateRef:
          name: scenario-1-orchestration-template
          template: orchestration-scaleout
        when: "{{workflow.parameters.sub_operation}} == \"submit_orchestration\""

  - name: handle-new-intent
    dag:
      tasks:
      - name: srds-service
        template: srds-service
        arguments:
          parameters:
          - name: service_ip
            value: "{{workflow.parameters.discovery_ip}}"
          - name: service_port
            value: "{{workflow.parameters.discovery_port}}"
          - name: intent_query
            value: "{{workflow.parameters.intent_query}}"

      - name: consume-best-ranked-offer
        dependencies: [srds-service]
        template: consume-best-ranked-offer
        arguments:
          parameters:
          - name: resources
            value: "{{tasks.srds-service.outputs.result}}"


  - name: handle-best-offers
    dag:
      tasks:
      - name: handle-best-offers
        # this step is mainly for pretty print
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{workflow.parameters.resources}}"
          - name: jq_query
            value: '.'

      - name: loop-best-offers-service
        # TODO: update queries once new discovery service supports 'service'
        # type discovery
        # loop through 'service' type offers
        dependencies: [handle-best-offers]
        template: loop-best-offers
        arguments:
          parameters:
          - name: best_offer
            value: "{{item}}"
          - name: jq_owner
            value: '.productSpecification.relatedParty[0].name'
          - name: jq_vsb
            value: '.Blueprint_name'
          - name: jq_product_id
            value: '.product_id'
          - name: jq_sla_id
            # TODO: revise sla query once exists in 'service' type offer
            value: '.serviceLevelAgreement.id'
        withParam: "{{workflow.parameters.resources}}"

  - name: loop-best-offers
    inputs:
      parameters:
      - name: best_offer
      - name: jq_owner
      - name: jq_vsb
      - name: jq_product_id
      - name: jq_sla_id
    dag:
      tasks:
      - name: resource-service-owner
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: "{{inputs.parameters.jq_owner}}"

      - name: process-mno-name
        dependencies: [resource-service-owner]
        templateRef:
          name: workflow-base
          template: correct-mno-name
        arguments:
          parameters:
          - name: mno_name
            value: "{{tasks.resource-service-owner.outputs.result}}"

      - name: resource-vsb
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: "{{inputs.parameters.jq_vsb}}"

      - name: product-id
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: "{{inputs.parameters.jq_product_id}}"

      - name: sla-id
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: "{{inputs.parameters.jq_sla_id}}"

      - name: acquire
        dependencies: [process-mno-name, resource-vsb, product-id, sla-id]
        # invokes acquire template for every entry in resources list
        # waits for them to succeed and publishes status success for the
        # service owner to consume
        template: acquire
        arguments:
          parameters:
          - name: product_id
            value: "{{tasks.product-id.outputs.result}}"

      - name: trigger-orchestration-scaleout
        dependencies: [acquire]
        template: trigger-orchestration-scaleout
        arguments:
          parameters:
          - name: service_owner
            value: "{{tasks.process-mno-name.outputs.result}}"
          - name: resource_vsb
            value: "{{tasks.resource-vsb.outputs.result}}"
          - name: product_id
            value: "{{tasks.product-id.outputs.result}}"
          - name: sla_id
            value: "{{tasks.sla-id.outputs.result}}"


  - name: srds-service
    inputs:
      parameters:
      - name: service_ip
      - name: service_port
      - name: intent_query
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys
        import urllib
        import urllib.parse

        # TODO: take from intent once discovery service supports
        # 'SW bundled' offer discovery
        requested_price = str("15-25")
        price = requested_price.split('-')[0]
        headers = {'Content-Type': 'application/json'}

        # TODO: switch to updated discovery service once it supports
        # 'SW bundled' offer discovery
        r = requests.get("http://{{inputs.parameters.service_ip}}:32000/discoveroffer/vnf"
            "_lat43_long10_" + str(price) + "_CDN",
            headers=headers)

        # best ranked offer *always* at the first entry
        best_offer = r.json()[0]

        # TODO: remove this once these attributes are inside the 'SW bundled' offer
        best_offer['Blueprint_name'] = 'vCDN_edge_ICOM'
        best_offer['serviceLevelAgreement']['id'] = 'RErjUVHVKqw1bu8WHPjxCU'
        best_offer['productSpecification']['relatedParty'][0]['name'] = 'operator_a'
        json.dump([best_offer], sys.stdout)

  - name: acquire
    # acquire is devided into two sub-tasks:
    # 1. the acquire operation itself
    # 2. branch to inspect acquire status and either fail the flow
    # or proceed as normal
    inputs:
      parameters:
      - name: product_id
    steps:
      - - name: acquire-resource
          template: acquire-simulator
          arguments:
            parameters:
            - name: product_id
              value: "{{inputs.parameters.product_id}}"

      - - name: fail-flow
          templateRef:
            name: workflow-base
            template: fail
          when: "{{steps.acquire-resource.outputs.parameters.status}} == \"FAIL\""

  - name: acquire-simulator
    # simulate a resource purchase with a return of a
    # fail/success status
    inputs:
      parameters:
      - name: product_id
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import random
        import sys
        status = "acquire_success"
        json.dump({"product_id": "{{inputs.parameters.product_id}}", "status": status}, sys.stdout)
        with open("/tmp/status.txt", "a") as myfile:
            myfile.write(status)
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status.txt

  - name: consume-best-ranked-offer
    inputs:
      parameters:
      - name: resources
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid

      - - name: publish-best-ranked-offer
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}", "transaction_uuid": "{{workflow.name}}",
                  "scenario": "{{workflow.parameters.scenario}}",
                  "resources": {{inputs.parameters.resources}},
                  "operation": "{{workflow.parameters.operation}}", "sub_operation": "submit_bp",
                  "service_owner": "{{workflow.parameters.service_owner}}",
                  "service_id": "{{workflow.parameters.service_id}}"}
            - name: kafka_topic
              # route to myself (stakeholder)
              value: "issm-in-{{workflow.parameters.service_owner}}"

  - name: trigger-orchestration-instantiate
    #
    # Send orchestration request to stakeholder that triggered scaleout
    #
    inputs:
      parameters:
      - name: service_owner
      - name: resource_vsb
      - name: product_id
      - name: sla_id
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-orchestration-workflow
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}", "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                  "scenario": "{{workflow.parameters.scenario}}",
                  "operation": "{{workflow.parameters.operation}}", "sub_operation": "submit_orchestration",
                  "resource_vsb": "{{inputs.parameters.resource_vsb}}", "product_id": "{{inputs.parameters.product_id}}",
                  "service_owner": "{{workflow.parameters.service_owner}}",
                  "service_owner": "{{inputs.parameters.service_owner}}",
                  "sla_id": "{{inputs.parameters.sla_id}}" }
            - name: kafka_topic
              # route orchestration request to the offer's owner
              value: "issm-in-{{inputs.parameters.service_owner}}"

  - name: trigger-orchestration-scaleout
    #
    # Send orchestration request to stakeholder that triggered scaleout
    # passing 'service_id' that denotes the instance id to scaleout
    #
    # Note: an asymetric orchestration is being used where stakeholder's
    # orchestration stack is responsible to perform the scaleout operation into
    # the 3rd party premises
    #
    inputs:
      parameters:
      - name: service_owner
      - name: resource_vsb
      - name: product_id
      - name: sla_id
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-orchestration
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}", "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                  "scenario": "{{workflow.parameters.scenario}}",
                  "operation": "{{workflow.parameters.operation}}", "sub_operation": "submit_orchestration",
                  "resource_vsb": "{{inputs.parameters.resource_vsb}}", "product_id": "{{inputs.parameters.product_id}}",
                  "service_owner": "{{workflow.parameters.service_owner}}", "service_id": "{{workflow.parameters.service_id}}",
                  "service_owner": "{{inputs.parameters.service_owner}}",
                  "sla_id": "{{inputs.parameters.sla_id}}" }
            - name: kafka_topic
              # route orchestration request to the stekholder
              value: "issm-in-{{inputs.parameters.service_owner}}"

  - name: whalesay
    inputs:
      parameters:
      - name: message
    container:
      image: docker/whalesay
      imagePullPolicy: IfNotPresent
      command: [cowsay]
      args: ["{{inputs.parameters.message}}"]