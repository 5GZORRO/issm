# Copyright 2020 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: snfvo-vcdn-on-slice
spec:
  templates:
  - name: extend-to-geolocation
    steps:
    - - name: extend-to-geolocation-service
        when: "{{workflow.parameters.sub_operation}} == \"INSTANTIATE_SERVICE\""
        template: extend-to-geolocation-service
    - - name: optimizer-response
        when: "{{workflow.parameters.sub_operation}} == \"BEST_OFFER_SELECTION\""
        template: optimizer-response

  - name: extend-to-geolocation-service
    dag:
      tasks:
      - name: get-order-from-catalog
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.order_id}}"

      - name: build-discovery-query
        dependencies: [get-order-from-catalog]
        templateRef:
          name: workflow-discovery
          template: build-intent-query
        arguments:
          parameters:
          - name: category
            value: Edge

          - name: place
            value: "{{workflow.parameters.place}}"
          - name: cpu
            value: ""
          - name: mem
            value: ""
          - name: mem_unit
            value: ""
          - name: storage
            value: ""
          - name: storage_unit
            value: ""

      - name: discover-edges
        templateRef:
          name: workflow-discovery
          template: srds-service
        dependencies: [build-discovery-query]
        arguments:
          parameters:
          - name: srsd_url
            value: "{{workflow.parameters.srsd_url}}"
          - name: intent_query
            value: "{{tasks.build-discovery-query.outputs.result}}"

      - name: prepare-request-to-optimizer
        dependencies: [discover-edges]
        templateRef:
          name: workflow-topology
          template: mock-optimizer-output
        arguments:
          parameters:
          - name: resources
            value: "{{tasks.discover-edges.outputs.result}}"
          - name: app_topology
            value: "{{workflow.parameters.app_topology}}"
  
      - name: send-edges-to-optimizer
        # simulates interaction with ISSM-O
        dependencies: [prepare-request-to-optimizer]
        templateRef:
          name: workflow-base
          template: publish-on-kafka
        arguments:
          parameters:
          - name: data
            value: |
              { "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                "topic": "issm-in-{{workflow.parameters.service_owner}}", 
                "category": "{{workflow.parameters.category}}",
                "resources": {{tasks.discover-edges.outputs.result}},
                "operation": "{{workflow.parameters.operation}}", "sub_operation": "BEST_OFFER_SELECTION",
                "service_owner": "{{workflow.parameters.service_owner}}",
                "order_id": "{{workflow.parameters.order_id}}",
                "catalogue_url": "{{workflow.parameters.catalogue_url}}",
                "trmf_url": "{{workflow.parameters.trmf_url}}",
                "issm_api_url": "{{workflow.parameters.issm_api_url}}",
                "domain_related_party_did": "{{workflow.parameters.service_owner_did}}",
                "name": "{{tasks.get-order-from-catalog.outputs.parameters.name}}",
                "snfvo_data": {{workflow.parameters.snfvo_data}},
                "kafka": "{{workflow.parameters.kafka}}",
                "app_topology": {{workflow.parameters.app_topology}},
                "serviceSpecification_resourceSpecification": {{tasks.get-order-from-catalog.outputs.parameters.serviceSpecification_resourceSpecification}},
                "optimizer_output": {{tasks.prepare-request-to-optimizer.outputs.parameters.optimizer_output}}
              }
          - name: kafka_topic
            value: issm-optimizer

# optimizer_output e.g.:
# [{'index': 0, 'selected_offer': '...', 'mapped_function': 'upf'},
# {'index':  1, 'selected_offer': '...', 'mapped_function': 'core'},
# {'index':  2, 'selected_offer': '...', 'mapped_function': 'upf'},
# {'index':  3, 'selected_offer': '...', 'mapped_function': 'app'},
# {'index':  4, 'selected_offer': '...', 'mapped_function': 'app'}]
  - name: optimizer-response
    dag:
      tasks:
      - name: core-entry
        template: core-entry
        arguments:
          parameters:
          - name: entries
            value: "{{workflow.parameters.optimizer_output}}"

      - name: handle-core
        dependencies: [core-entry]
        template: handle-placement-entry
        arguments:
          parameters:
          - name: entry
            value: "{{tasks.core-entry.outputs.parameters.entry}}"

      - name: loop-edges
        # deploy in parallel (loop) all other functions excluding core
        dependencies: [handle-core]
        template: handle-placement-entry
        arguments:
          parameters:
          - name: entry
            value: "{{item}}"
        withParam: "{{tasks.core-entry.outputs.parameters.entries}}"

  - name: handle-placement-entry
    # DELETE this note [Note: these are 'flattened JSON': true, null, ..]
    inputs:
      parameters:
      - name: entry
    dag:
      tasks:
      - name: entry-attributes
        templateRef:
          name: workflow-topology
          template: entry-attributes
        arguments:
          parameters:
          - name: entry
            value: "{{inputs.parameters.entry}}"
      
      - name: print-selected-offer
        dependencies: [entry-attributes]
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{tasks.entry-attributes.outputs.parameters.selected_offer}}"
          - name: jq_query
            value: '.'

      - name: selected-offer-attributes
        dependencies: [entry-attributes]
        templateRef:
          name: workflow-discovery
          template: resource-attributes
        arguments:
          parameters:
          - name: resource
            value: "{{tasks.entry-attributes.outputs.parameters.selected_offer}}"

      - name: acquire
        dependencies: [selected-offer-attributes, print-selected-offer]
        templateRef:
          name: workflow-catalog
          template: acquire
        arguments:
          parameters:
          - name: resource_name
            value: "{{tasks.selected-offer-attributes.outputs.parameters.name}}"
          - name: resource_category
            value: "{{tasks.selected-offer-attributes.outputs.parameters.category}}"

          - name: resource_id
            value: "{{tasks.selected-offer-attributes.outputs.parameters.id}}"
          - name: related_party_seller
            value: "{{tasks.selected-offer-attributes.outputs.parameters.related_party}}"
          - name: related_party_did_seller
            value: "{{tasks.selected-offer-attributes.outputs.parameters.related_party_did}}"

          - name: related_party_buyer
            value: "{{workflow.parameters.service_owner}}"
          - name: related_party_did_buyer
            value: "{{workflow.parameters.domain_related_party_did}}"

          - name: resource_did
            value: "{{tasks.selected-offer-attributes.outputs.parameters.did}}"

          - name: validFor
            value: "{{tasks.selected-offer-attributes.outputs.parameters.validFor}}"

      - name: userdata
        dependencies: [entry-attributes]
        template: userdata
        arguments:
          parameters:
          - name: mapped_function
            value: "{{tasks.entry-attributes.outputs.parameters.mapped_function}}"
          - name: index
            value: "{{tasks.entry-attributes.outputs.parameters.index}}"
          - name: snfvo_data
            value: |
              {{workflow.parameters.snfvo_data}}


      - name: trigger-orchestration
        dependencies: [acquire, userdata]
        #dependencies: [userdata, selected-offer-attributes]
        templateRef:
          name: workflow-orchestrator
          template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            # domain's orchestrator
            value: "{{tasks.selected-offer-attributes.outputs.parameters.related_party}}"

          - name: vsbName
            # possible values: 'core', 'upf' or 'app'
            value: "{{tasks.entry-attributes.outputs.parameters.mapped_function}}"

          - name: userdata
            value: "{{tasks.userdata.outputs.parameters.userdata}}"

          - name: vsd_parameters
            value: "{ }"

      - name: wait-for-status
        dependencies: [trigger-orchestration]
        templateRef:
          name: workflow-base
          template: consume
        arguments:
          parameters:
          - name: kafka
            value: "{{workflow.parameters.kafka}}"
          - name: kafka_topic
            value: "issm-in-{{workflow.parameters.service_owner}}"
          - name: msg_id
            value: "{{tasks.trigger-orchestration.outputs.parameters.event_uuid}}"

      - name: get-instance-id
        dependencies: [wait-for-status]
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: vsi_id
          - name: json_str
            value: |
              {{tasks.wait-for-status.outputs.parameters.payload}}

#      - name: update-order
#        dependencies: [get-instance-id]
#        templateRef:
#          name: workflow-catalog
#          template: update-order-instance-id
#        # in any case, persist instanceId
#        arguments:
#          parameters:
#          - name: transaction_uuid
#            value: "{{workflow.parameters.transaction_uuid}}"
#          - name: order_id
#            # the main NetworkService order
#            value: "{{workflow.parameters.order_id}}"
#          - name: main
#            value: "true"
#          - name: instance_id
#            value: "{{tasks.get-instance-id.outputs.result}}"
#          - name: related_party
#            value: "{{tasks.selected-offer-attributes.outputs.parameters.related_party}}"

  - name: instantiate
    dag:
      tasks:
      - name: success
        templateRef:
          name: workflow-base
          template: success


  - name: scaleout
    dag:
      tasks:
      - name: success
        templateRef:
          name: workflow-base
          template: success

  - name: core-entry
    # Retrieve 'core' placement entry from the placement list, returning back
    # the list excluding that
    inputs:
      parameters:
      - name: entries
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import sys

        def find(l, predicate):
            """
            util method
            """
            results = [x for x in l if predicate(x)]
            return results[0] if len(results) > 0 else None

        # entries is received from sensor which is a flattened json
        # none-pythonic json (null, true, false, ..)
        entries = '{{inputs.parameters.entries}}'
        entries_json = json.loads(entries)

        sys.stdout.write('entries: "%s" \n' % entries_json)

        entry = find(entries_json, lambda e: e.get('mapped_function', '') == 'core')
        if not entry:
            raise Exception("*** Unable to find 'core' entry ***")

        entries_json.remove(entry)
        with open('/tmp/entry.txt', 'w') as f:
            json.dump(entry, f)
        with open('/tmp/entries.txt', 'w') as f:
            json.dump(entries_json, f)

    outputs:
      parameters:
      - name: entry
        valueFrom:
          path: /tmp/entry.txt
      - name: entries
        # placement entries without the core
        valueFrom:
          path: /tmp/entries.txt

  - name: userdata
    inputs:
      parameters:
      - name: mapped_function
      - name: index
      - name: snfvo_data
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import sys

        mapped_function = "{{inputs.parameters.mapped_function}}"
        sys.stdout.write('mapped_function: "%s" \n' % mapped_function)

        index = int("{{inputs.parameters.index}}")
        sys.stdout.write('index: %d \n' % index)

        snfvo_data = {{inputs.parameters.snfvo_data}}
        sys.stdout.write('snfvo_data: %s \n' % snfvo_data)

        userdata = snfvo_data[mapped_function]
        userdata['pool'] = snfvo_data['upf_pools'][index]
        sys.stdout.write('userdata: %s \n' % userdata)

        with open('/tmp/userdata.txt', 'w') as f:
            json.dump(userdata, f)

    outputs:
      parameters:
      - name: userdata
        valueFrom:
          path: /tmp/userdata.txt
