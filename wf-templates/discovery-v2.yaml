# Copyright 2020 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-discovery
spec:
  templates:
  - name: build-intent-query
    inputs:
      parameters:
      - name: place
      - name: cpu_max
      - name: mem_max
      - name: mem_unit
      - name: storage_max
      - name: storage_unit
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import sys
        # Example format: intent/$(urlencode 'storage 96 GB ram 2730 MB edge Barcelona'))
        location = {{inputs.parameters.place}}['city']

        cpu_max = str("{{inputs.parameters.cpu_max}}")

        mem_max = str("{{inputs.parameters.mem_max}}")
        mem_unit = str("{{inputs.parameters.mem_unit}}")

        storage_max = str("{{inputs.parameters.storage_max}}")
        storage_unit = str("{{inputs.parameters.storage_unit}}")

        sys.stdout.write(cpu_max + " cores" + " storage " + storage_max + " " + storage_unit + " ram " + mem_max + " " + mem_unit + " edge " +  location + " \n")


  - name: srds-service
    inputs:
      parameters:
      - name: service_ip
      - name: service_port
      - name: intent_query
      - name: place
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys
        import urllib
        import urllib.parse

        location = {{inputs.parameters.place}}['city']
        headers = {'Content-Type': 'application/json'}
        intent_query = str("{{inputs.parameters.intent_query}}")
        iq = urllib.parse.quote(intent_query)
        r = requests.get("http://{{inputs.parameters.service_ip}}:{{inputs.parameters.service_port}}/intent/" + iq, headers=headers)
        offers = r.json()

        print(offers)


  - name: resource-attributes
    inputs:
      parameters:
      - name: resource
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import sys

        po = {{inputs.parameters.resource}}

        name = ""
        po_id = ""
        place = {}
        resource_owner = ""
        did = ""

        # Name
        name = po['name']
        sys.stdout.write('name: "%s" \n' % name)

        # Id
        po_id = po['best_offer']['id']
        sys.stdout.write('name: "%s" \n' % name)

        # Place
        place = po['place'][0]['href']
        sys.stdout.write('place: "%s" \n' % place)

        # resource owner
        resource_owner = po['offer_object']['productSpecification']['relatedParty'][0]['name']
        resource_owner = resource_owner.replace('_','-').lower()
        sys.stdout.write('resource_owner: "%s" \n' % resource_owner)

        # DID
        did = po['offer_did']

        with open('/tmp/did.txt', 'w') as f:
            f.write(str(did))

        with open('/tmp/place.txt', 'w') as f:
            json.dump(place, f)

        with open('/tmp/resource_owner.txt', 'w') as f:
            f.write(resource_owner)

        with open('/tmp/name.txt', 'w') as f:
            f.write(name)

        with open('/tmp/id.txt', 'w') as f:
            f.write(po_id)

    outputs:
      parameters:
      - name: place
        valueFrom:
          path: /tmp/place.txt

      - name: resource_owner
        valueFrom:
          path: /tmp/resource_owner.txt

      - name: did
        valueFrom:
          path: /tmp/did.txt

      - name: name
        valueFrom:
          path: /tmp/name.txt

      - name: id
        valueFrom:
          path: /tmp/id.txt
