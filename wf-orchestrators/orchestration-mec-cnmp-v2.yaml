# Copyright 2020 - 2021 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################################
#
# Important: this template can either run in stakeholder context or 3rd-party
#
################################################################################

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  # Note: this name must be identical accross all domain operators
  name: orchestration
spec:
  templates:

  - name: subnetslice
    inputs:
      parameters:
      - name: userdata

      - name: mec_cnmp_url

      - name: cluster
      - name: cluster_core
      - name: tenant_name

      - name: core_tenant_name

    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [sh]
      source: |
        generate_post_instance_create()
        {
          cat <<EOF
        {
          "cluster_core": "{{inputs.parameters.cluster_core}}",
          "cluster_edge": "{{inputs.parameters.cluster_edge}}",
          "core_namespace": "{{inputs.parameters.core_namespace}}",
          "namespace": "{{inputs.parameters.namespace}}",
          "sst": "{{inputs.parameters.sst}}",
          "sd": "{{inputs.parameters.sd}}",
          "network_name": "{{inputs.parameters.network_name}}",
          "network_master": "{{inputs.parameters.network_master}}",
          "network_range": "{{inputs.parameters.network_range}}",
          "network_start": "{{inputs.parameters.network_start}}",
          "network_end": "{{inputs.parameters.network_end}}",
          "networks": {{inputs.parameters.networks}}
        }
        EOF
        }
        echo "Create instance.."
        nssi_id="$(curl --data "$(generate_post_instance_create)" -X POST http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/subnetslice --header "Content-Type:application/json" 2>/dev/null | jq -r .name)"
        echo "Instance: $nssi_id being created.."
        echo $nssi_id > /tmp/id.txt
    outputs:
      parameters:
      - name: nssi_id
        valueFrom:
          path: /tmp/id.txt

  - name: poll
    inputs:
      parameters:
      - name: poll
      - name: mec_cnmp_ip
      - name: mec_cnmp_port
      - name: namespace
      - name: nssi_id
      - name: jq_query
      - name: jq_query_value
      - name: timeout
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [sh]
      source: |
        if [ {{inputs.parameters.poll}} = "true" ]; then
          i=0
          until [ "$(curl http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/core_subnetslice/{{inputs.parameters.namespace}}/{{inputs.parameters.nssi_id}} | jq -r {{inputs.parameters.jq_query}})" == "{{inputs.parameters.jq_query_value}}" -o $i -gt {{inputs.parameters.timeout}} ]; do
             echo "Poll wait for nssi_id: {{inputs.parameters.nssi_id}}.. (1 sec)"
             sleep 1
             i=$((i+1))
          done
          if [ $i -gt {{inputs.parameters.timeout}} ]; then
            echo "TIMEOUT"
            echo "TIMEOUT" > /tmp/status.txt
          else
            echo "$(curl http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/core_subnetslice/{{inputs.parameters.namespace}}/{{inputs.parameters.nssi_id}} | jq -r {{inputs.parameters.jq_query}})" > /tmp/status.txt
          fi
        else  
          echo "$(curl http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/core_subnetslice/{{inputs.parameters.namespace}}/{{inputs.parameters.nssi_id}} | jq -r {{inputs.parameters.jq_query}})" > /tmp/status.txt
        fi
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status.txt



