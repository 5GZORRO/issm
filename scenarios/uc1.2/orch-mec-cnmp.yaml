# Copyright 2021 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: uc1-2-orchestration-template
spec:
  templates:
  - name: orchestration-instantiate
    dag:
      tasks:
      - name: mec-cnmp-create-nssi
        template: mec-cnmp-create-nssi
        arguments:
          parameters:
          - name: mec_cnmp_ip
            value: 1.2.3.4
          - name: mec_cnmp_port
            value: "30055"

          - name: namespace
            value: "domain-{{workflow.parameters.resource_owner}}"

          - name: cluster
            value: cluster-1

          - name: cluster_core
            value: cluster-2

          - name: networks
            value: |
              [
                {
                  "name": "sbi",
                  "master": "ens3",
                  "range": "10.100.200.0/24",
                  "start": "10.100.200.21",
                  "end": "10.100.200.40"
                },
                {
                  "name": "up",
                  "master": "ens3",
                  "range": "192.168.1.0/24",
                  "start": "192.168.1.251",
                  "end": "192.168.1.253"
                }
              ]

      - name: mec-cnmp-poll
        dependencies: [mec-cnmp-create-nssi]
        template: poll
        arguments:
          parameters:
          - name: poll
            value: "true"
          - name: mec_cnmp_ip
            value: 1.2.3.4
          - name: mec_cnmp_port
            value: "30055"
          - name: namespace
            value: "domain-{{workflow.parameters.resource_owner}}"
          - name: nssi_id
            value: "{{tasks.mec-cnmp-create-nssi.outputs.parameters.nssi_id}}"
          - name: jq_query
            value: ".phase"
          - name: jq_query_value
            value: "Succeeded"
          - name: timeout
            value: 180

      - name: poll-timeout
        dependencies: [mec-cnmp-poll]
        templateRef:
          name: workflow-base
          template: fail
        when: "{{tasks.mec-cnmp-poll.outputs.parameters.status}} == \"TIMEOUT\""

  - name: orchestration-scaleout
    dag:
      tasks:
      - name: mec-cnmp-create-nssi
        template: mec-cnmp-create-nssi
        arguments:
          parameters:
          - name: mec_cnmp_ip
            value: 1.2.3.4
          - name: mec_cnmp_port
            value: "30055"

          # Extend stakeholder free5gc to (upf) in a 3rd party domain
          - name: core_namespace
            value: "domain-{{workflow.parameters.service_owner}}"
          - name: namespace
            value: "domain-{{workflow.parameters.resource_owner}}"

          - name: cluster
            value: cluster-1

          - name: sst
            value: "1"
          - name: sd
            value: "010203"

          - name: cluster_core
            value: cluster-2

          - name: networks
            value: |
              [
                {
                  "name": "sbi",
                  "master": "ens3",
                  "range": "10.100.200.0/24",
                  "start": "10.100.200.21",
                  "end": "10.100.200.40"
                },
                {
                  "name": "up",
                  "master": "ens3",
                  "range": "192.168.1.0/24",
                  "start": "192.168.1.251",
                  "end": "192.168.1.253"
                }
              ]

      - name: mec-cnmp-poll
        dependencies: [mec-cnmp-create-nssi]
        template: poll
        arguments:
          parameters:
          - name: poll
            value: "true"
          - name: mec_cnmp_ip
            value: 1.2.3.4
          - name: mec_cnmp_port
            value: "30055"
          - name: namespace
            value: "domain-{{workflow.parameters.resource_owner}}"
          - name: nssi_id
            value: "{{tasks.mec-cnmp-create-nssi.outputs.parameters.nssi_id}}"
          - name: jq_query
            value: ".phase"
          - name: jq_query_value
            value: "Succeeded"
          - name: timeout
            value: 180

  - name: mec-cnmp-create-nssi
    inputs:
      parameters:
      - name: mec_cnmp_ip
      - name: mec_cnmp_port

      - name: namespace
      - name: cluster

      - name: core_namespace

      - name: sst
      - name: sd

      - name: cluster_core

      - name: network_name
      - name: network_master
      - name: network_range
      - name: network_start
      - name: network_end

      - name: networks

    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [sh]
      source: |
        generate_post_instance_create()
        {
          cat <<EOF
        {
          "cluster": "{{inputs.parameters.cluster}}",
          "namespace": "{{inputs.parameters.namespace}}",
          "cluster_core": "{{inputs.parameters.cluster_core}}",
          "core_namespace": "{{inputs.parameters.core_namespace}}",
          "product_id": "{{workflow.parameters.product_DID}}",
          "elma_url": "{{workflow.parameters.elma_url}}",
          "sst": "{{inputs.parameters.sst}}",
          "sd": "{{inputs.parameters.sd}}",
          "network_name": "{{inputs.parameters.network_name}}",
          "network_master": "{{inputs.parameters.network_master}}",
          "network_range": "{{inputs.parameters.network_range}}",
          "network_start": "{{inputs.parameters.network_start}}",
          "network_end": "{{inputs.parameters.network_end}}",
          "networks": {{inputs.parameters.networks}}
        }
        EOF
        }
        echo "Create instance.."
        nssi_id="$(curl --data "$(generate_post_instance_create)" -X POST http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/subnetslice --header "Content-Type:application/json" 2>/dev/null | jq -r .name)"
        echo "Instance: $nssi_id being created.."
        echo $nssi_id > /tmp/id.txt
    outputs:
      parameters:
      - name: nssi_id
        valueFrom:
          path: /tmp/id.txt

  - name: poll
    inputs:
      parameters:
      - name: poll
      - name: mec_cnmp_ip
      - name: mec_cnmp_port
      - name: namespace
      - name: nssi_id
      - name: jq_query
      - name: jq_query_value
      - name: timeout
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [sh]
      source: |
        if [ {{inputs.parameters.poll}} = "true" ]; then
          i=0
          until [ "$(curl http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/core_subnetslice/{{inputs.parameters.namespace}}/{{inputs.parameters.nssi_id}} | jq -r {{inputs.parameters.jq_query}})" == "{{inputs.parameters.jq_query_value}}" -o $i -gt {{inputs.parameters.timeout}} ]; do
             echo "Poll wait for nssi_id: {{inputs.parameters.nssi_id}}.. (1 sec)"
             sleep 1
             i=$((i+1))
          done
          if [ $i -gt {{inputs.parameters.timeout}} ]; then
            echo "TIMEOUT"
            echo "TIMEOUT" > /tmp/status.txt
          else
            echo "$(curl http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/core_subnetslice/{{inputs.parameters.namespace}}/{{inputs.parameters.nssi_id}} | jq -r {{inputs.parameters.jq_query}})" > /tmp/status.txt
          fi
        else  
          echo "$(curl http://{{inputs.parameters.mec_cnmp_ip}}:{{inputs.parameters.mec_cnmp_port}}/core_subnetslice/{{inputs.parameters.namespace}}/{{inputs.parameters.nssi_id}} | jq -r {{inputs.parameters.jq_query}})" > /tmp/status.txt
        fi
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status.txt
