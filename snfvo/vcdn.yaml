apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: snfvo-vcdn-flow
spec:
  templates:
  - name: instantiate
    steps:
    - - name: instantiate-service
        when: "{{workflow.parameters.sub_operation}} == \"INSTANTIATE_SERVICE\""
        template: instantiate-service

  - name: instantiate-service
    dag:
      tasks:
      - name: snfvo-slice-order-id
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: slice_order_id
          - name: json_str
            value: |
              {{workflow.parameters.snfvo_data}}

      - name: snfvo-userdata
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: userdata
          - name: json_str
            value: |
              {{workflow.parameters.snfvo_data}}

      - name: snfvo-vsd-parameters
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: vsd_parameters
          - name: json_str
            value: |
              {{workflow.parameters.snfvo_data}}

      - name: get-slice-order-from-catalog
        dependencies: [snfvo-slice-order-id]
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{tasks.snfvo-slice-order-id.outputs.result}}"

      - name: get-order-from-catalog
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.order_id}}"

      - name: trigger-orchestration-slice
        dependencies: [get-slice-order-from-catalog, snfvo-userdata, snfvo-vsd-parameters]
        templateRef:
          name: workflow-orchestrator
          template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            # domain's orchestrator
            value: "{{workflow.parameters.related_party}}"

          - name: vsbName
            value: "{{tasks.get-slice-order-from-catalog.outputs.parameters.vsbName}}"

          - name: product_DID
            value: ""

          - name: sla_DID
            value: ""

          - name: place
            value: "{{workflow.parameters.place}}"

          - name: userdata
            # slice userdata is at snfvo_data['userdata']
            value: "{{tasks.snfvo-userdata.outputs.result}}"

          - name: vsd_parameters
            # snfvo_data['vsd_parameters']
            value: "{{tasks.snfvo-vsd-parameters.outputs.result}}"

      - name: wait-for-status
        dependencies: [trigger-orchestration-slice]
        template: consume
        arguments:
          parameters:
          - name: kafka_ip
            value: "{{workflow.parameters.kafka_ip}}"
          - name: kafka_port
            value: "{{workflow.parameters.kafka_port}}"
          - name: kafka_topic
            value: "issm-in-{{workflow.parameters.service_owner}}"
          - name: msg_id
            value: "{{tasks.trigger-orchestration-slice.outputs.parameters.event_uuid}}"

      - name: get-edge-id
        dependencies: [wait-for-status]
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: vsi_id
          - name: json_str
            value: |
              {{tasks.wait-for-status.outputs.parameters.payload}}

      - name: add-user-data-vcdn
        dependencies: [get-order-from-catalog, get-edge-id]
        templateRef:
          name: workflow-base
          template: add-to-dict
        arguments:
          parameters:
          - name: dict1
            value: |
              { }
          - name: dict2
            value: |
              {
                "product_id": "{{tasks.get-order-from-catalog.outputs.parameters.did}}",
                "transaction_id": "{{workflow.parameters.transaction_uuid}}",
                "edge_resource_instance": "{{tasks.get-edge-id.outputs.result}}"
              }


      - name: trigger-orchestration-vcdn-service
        dependencies: [add-user-data-vcdn]
        templateRef:
          name: workflow-orchestrator
          template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            # domain's orchestrator
            value: "{{workflow.parameters.related_party}}"
          - name: vsbName
            value: "{{tasks.get-order-from-catalog.outputs.parameters.vsbName}}"
          - name: product_DID
            value: "{{tasks.get-order-from-catalog.outputs.parameters.did}}"
          - name: sla_DID
            value: "{{tasks.get-order-from-catalog.outputs.parameters.sla_did}}"
          - name: place
            value: "{{workflow.parameters.place}}"
          - name: userdata
            value: "{{tasks.add-user-data-vcdn.outputs.parameters.dict}}"

          - name: vsd_parameters
            # snfvo_data['vsd_parameters']
            value: "{{tasks.snfvo-vsd-parameters.outputs.result}}"

  - name: scaleout
    steps:
    - - name: scaleout-service
        when: "{{workflow.parameters.sub_operation}} == \"SCALEOUT_SERVICE\""
        template: scaleout-service
    - - name: best-offer-selection
        when: "{{workflow.parameters.sub_operation}} == \"BEST_OFFER_SELECTION\""
        template: best-offer-selection


###


  - name: scaleout-service
    dag:
      tasks:
      - name: get-order-from-catalog
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.order_id}}"

      - name: build-intent-query
        dependencies: [get-order-from-catalog]
        templateRef:
          name: workflow-discovery
          template: build-intent-query
        arguments:
          parameters:
          - name: place
            value: "{{workflow.parameters.place}}"
          - name: cpu_max
            value: "{{tasks.get-order-from-catalog.outputs.parameters.cpu_max}}"
          - name: mem_max
            value: "{{tasks.get-order-from-catalog.outputs.parameters.mem_max}}"
          - name: mem_unit
            value: "{{tasks.get-order-from-catalog.outputs.parameters.mem_unit}}"
          - name: storage_max
            value: "{{tasks.get-order-from-catalog.outputs.parameters.storage_max}}"
          - name: storage_unit
            value: "{{tasks.get-order-from-catalog.outputs.parameters.storage_unit}}"
  
      - name: srds-service
        templateRef:
          name: workflow-discovery
          template: srds-service
        dependencies: [build-intent-query]
        arguments:
          parameters:
          - name: service_ip
            value: "{{workflow.parameters.discovery_ip}}"
          - name: service_port
            value: "{{workflow.parameters.discovery_port}}"
          - name: intent_query
            value: "{{tasks.build-intent-query.outputs.result}}"
          - name: place
            value: "{{workflow.parameters.place}}"
  
      - name: send-resouces-to-optimizer
        dependencies: [srds-service]
        templateRef:
          name: workflow-base
          template: publish-on-kafka
        arguments:
          parameters:
          - name: data
            value: |
              { "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                "topic": "issm-in-{{workflow.parameters.service_owner}}", 
                "category": "{{workflow.parameters.category}}",
                "resources": {{tasks.srds-service.outputs.result}},
                "operation": "scaleout", "sub_operation": "BEST_OFFER_SELECTION",
                "service_owner": "{{workflow.parameters.service_owner}}",
                "sla_breach": {{workflow.parameters.sla_breach}},
                "elma_url": "{{workflow.parameters.elma_url}}",
                "order_id": "{{workflow.parameters.order_id}}",
                "catalogue_url": "{{workflow.parameters.catalogue_url}}",
                "trmf_url": "{{workflow.parameters.trmf_url}}",
                "name": "{{tasks.get-order-from-catalog.outputs.parameters.name}}",
                "snfvo_data": {{workflow.parameters.snfvo_data}},
                "category": "{{workflow.parameters.category}}"                
              }
          - name: kafka_topic
            value: issm-optimizer


###


  - name: best-offer-selection
    dag:
      tasks:
      - name: get-order-from-catalog
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.order_id}}"

      - name: snfvo-slice-order-id
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: slice_order_id
          - name: json_str
            value: |
              {{workflow.parameters.snfvo_data}}

      - name: snfvo-vsd-parameters
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: vsd_parameters
          - name: json_str
            value: |
              {{workflow.parameters.snfvo_data}}

      - name: get-slice-order-from-catalog
        dependencies: [snfvo-slice-order-id]
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{tasks.snfvo-slice-order-id.outputs.result}}"

      - name: loop-best-offers-resource
        # loop through 'resource' type offers
        dependencies: [get-slice-order-from-catalog, snfvo-vsd-parameters, get-order-from-catalog]
        template: loop-best-offers
        arguments:
          parameters:
          - name: best_offer
            value: "{{item}}"
          - name: vsbName_Slice
            value: "{{tasks.get-slice-order-from-catalog.outputs.parameters.vsbName}}"
          - name: userdata_Slice
            value: "{ }"
          - name: vsbName_NS
            value: "{{tasks.get-order-from-catalog.outputs.parameters.vsbName}}"
          - name: product_DID
            value: "{{tasks.get-order-from-catalog.outputs.parameters.did}}"
          - name: sla_DID
            value: "{{tasks.get-order-from-catalog.outputs.parameters.sla_did}}"
          - name: vsd_parameters
            value: "{{tasks.snfvo-vsd-parameters.outputs.result}}"
        withParam: "{{workflow.parameters.resources}}"

  - name: loop-best-offers
    inputs:
      parameters:
      - name: best_offer
      - name: vsbName_Slice
      - name: userdata_Slice
      - name: vsbName_NS
      - name: product_DID
      - name: sla_DID
      - name: vsd_parameters
    dag:
      tasks:
      - name: print-selected-offer
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.'
      
      - name: resource-attributes
        templateRef:
          name: workflow-discovery
          template: resource-attributes
        arguments:
          parameters:
          - name: resource
            value: "{{inputs.parameters.best_offer}}"
        
      - name: acquire
        dependencies: [resource-attributes]
        template: acquire
        arguments:
          parameters:
          - name: resource_id
            value: "{{tasks.resource-attributes.outputs.parameters.id}}"
          - name: operator_id_seller
            value: "{{tasks.resource-attributes.outputs.parameters.resource_owner}}"
          - name: operator_id_buyer
            value: "{{workflow.parameters.service_owner}}"
          - name: resource_did
            value: "{{tasks.resource-attributes.outputs.parameters.did}}"


#=========== Scaleout: Slice

      - name: trigger-orchestration-slice
        dependencies: [acquire]
        templateRef:
          name: workflow-orchestrator
          template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            # domain's orchestrator
            value: "{{tasks.resource-attributes.outputs.parameters.resource_owner}}"

          - name: vsbName
            value: "{{inputs.parameters.vsbName_Slice}}"

          - name: product_DID
            # N/A for slice
            value: ""

          - name: sla_DID
            # N/A for slice
            value: ""

          - name: place
            value: "{{tasks.resource-attributes.outputs.parameters.place}}"

          - name: userdata
            value: "{{inputs.parameters.userdata_Slice}}"

          - name: vsd_parameters
            value: "{{inputs.parameters.vsd_parameters}}"


      - name: wait-for-status
        dependencies: [trigger-orchestration-slice]
        template: consume
        arguments:
          parameters:
          - name: kafka_ip
            value: "{{workflow.parameters.kafka_ip}}"
          - name: kafka_port
            value: "{{workflow.parameters.kafka_port}}"
          - name: kafka_topic
            value: "issm-in-{{workflow.parameters.service_owner}}"
          - name: msg_id
            value: "{{tasks.trigger-orchestration-slice.outputs.parameters.event_uuid}}"

      - name: get-edge-id
        dependencies: [wait-for-status]
        templateRef:
          name: workflow-base
          template: from-key
        arguments:
          parameters:
          - name: key
            value: vsi_id
          - name: json_str
            value: |
              {{tasks.wait-for-status.outputs.parameters.payload}}

# ========== Scaleout: Network Service

      - name: add-user-data-vcdn
        dependencies: [get-edge-id]
        templateRef:
          name: workflow-base
          template: add-to-dict
        arguments:
          parameters:
          - name: dict1
            value: |
              { }
          - name: dict2
            value: |
              {
                "product_id": "{{inputs.parameters.product_DID}}",
                "transaction_id": "{{workflow.parameters.transaction_uuid}}",
                "edge_resource_instance": "{{tasks.get-edge-id.outputs.result}}"
              }

      - name: trigger-orchestration-vcdn-service
        dependencies: [add-user-data-vcdn]
        templateRef:
          name: workflow-orchestrator
          template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            # domain's orchestrator
            value: "{{tasks.resource-attributes.outputs.parameters.resource_owner}}"
          - name: vsbName
            value: "{{inputs.parameters.vsbName_NS}}"
          - name: product_DID
            value: "{{inputs.parameters.product_DID}}"
          - name: sla_DID
            value: "{{inputs.parameters.sla_DID}}"
          - name: place
            value: "{{tasks.resource-attributes.outputs.parameters.place}}"
          - name: userdata
            value: "{{tasks.add-user-data-vcdn.outputs.parameters.dict}}"
          - name: vsd_parameters
            value: "{{inputs.parameters.vsd_parameters}}"


  - name: acquire
    inputs:
      parameters:
      - name: resource_id
      - name: operator_id_seller
      - name: operator_id_buyer
      - name: resource_did
    steps:
      - - name: acquire-resource
          templateRef:
            name: workflow-catalog
            template: create-order
          arguments:
            parameters:
            - name: resource_id
              value: "{{inputs.parameters.resource_id}}"
            - name: operator_id_seller
              value: "{{inputs.parameters.operator_id_seller}}"
            - name: operator_id_buyer
              value: "{{workflow.parameters.service_owner}}"

      - - name: notify-reputation-manager
          templateRef:
            name: workflow-catalog
            template: notify-trmf
          arguments:
            parameters:
            - name: resource_did
              value: "{{inputs.parameters.resource_did}}"


  - name: consume
    # Consumes a message from kafka broker of a matched event_uuid
    #
    # Parameters
    # kafka_topic: the topic to publish the message on (string)
    # kafka_ip: ipaddress of the kafka broker (string)
    # kafka_port: kafka broker port (number)
    # msg_id: the id of the message to look for (str)
    inputs:
      parameters:
      - name: kafka_topic
      - name: kafka_ip
      - name: kafka_port
      - name: msg_id
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import os
        import sys

        from kafka import KafkaConsumer
        from kafka.errors import KafkaError

        KAFKA_TOPIC = '{{inputs.parameters.kafka_topic}}'
        KAFKA_TIMEOUT = 10
        KAFKA_API_VERSION = (1, 1, 0)

        MSG_ID = "{{inputs.parameters.msg_id}}"
        payload = {}

        KAFKA_SERVER = "{}:{}".format("{{inputs.parameters.kafka_ip}}", "{{inputs.parameters.kafka_port}}")
        consumer = KafkaConsumer(bootstrap_servers=KAFKA_SERVER,
                                 client_id="aaa",
                                 enable_auto_commit=True,
                                 api_version=KAFKA_API_VERSION, group_id=MSG_ID)
        consumer.subscribe(pattern=KAFKA_TOPIC)

        for msg in consumer:
            # TODO: drain topic messages first so we do not consume stale messages
            payload = json.loads(msg.value.decode('utf-8', 'ignore'))
            sys.stdout.write('Received payload: %s \n' % payload)
            if payload.get('msg_id', '') == MSG_ID:
                sys.stdout.write('It is my message: %s \n' % payload)
                break

        with open('/tmp/payload.txt', 'w') as f:
            json.dump(payload, f)

    outputs:
      parameters:
      - name: payload
        valueFrom:
          path: /tmp/payload.txt
