apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: intent-template
spec:
  templates:
  - name: handle-new-intent
    dag:
      tasks:
      - name: srds-service
        template: srds-service
        arguments:
          parameters:
          - name: service_ip
            value: "{{workflow.parameters.discovery_ip}}"
          - name: service_port
            value: "{{workflow.parameters.discovery_port}}"
          - name: resourceSpecCharacteristic
            value: "{{workflow.parameters.resourceSpecCharacteristic}}"
          - name: category
            value: "{{workflow.parameters.category}}"
          - name: latitude
            value: "{{workflow.parameters.latitude}}"
          - name: longitude
            value: "{{workflow.parameters.longitude}}"
          - name: requested_price
            value: "{{workflow.parameters.requested_price}}"

      - name: send-resouces-to-optimizer
        # publish discovered resources for the optimizer to consume
        dependencies: [srds-service]
        templateRef:
          name: workflow-base
          template: publish-on-kafka
        arguments:
          parameters:
          - name: data
            # TODO: service_owner_target should be taken from PO
            # note: transaction_uuid is the event_uuid passed to this flow
            value: |
              { "event_uuid": "{{workflow.name}}", "transaction_uuid": "{{workflow.name}}", "topic": "issm-domain-{{workflow.parameters.service_owner}}", 
                "resources": {{tasks.srds-service.outputs.result}},
                "service_owner": "{{workflow.parameters.service_owner}}", "service_owner_target": "operator-a",
                "service_id": "{{workflow.parameters.service_id}}",
                "category": "{{workflow.parameters.category}}", "qos_parameters": {{workflow.parameters.qos_parameters}} }
          - name: kafka_topic
            value: issm-optimizer

  - name: handle-best-offer
    dag:
      tasks:
      - name: handle-best-offer
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{workflow.parameters.resources}}"
          - name: jq_query
            value: '.[0]'

      - name: acquire
        dependencies: [handle-best-offer]
        # invokes acquire template for every entry in resources list
        # waits for them to succeed and publishes status success for the
        # service owner to consume
        template: acquire
        arguments:
          parameters:
          - name: product_id
            value: "{{item.product_id}}"
        withParam: "{{workflow.parameters.resources}}"

      - name: resource-vsb
        dependencies: [acquire]
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{workflow.parameters.resources}}"
          - name: jq_query
            value: '.[0].Blueprint_name'

      - name: product-id
        dependencies: [acquire]
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{workflow.parameters.resources}}"
          - name: jq_query
            value: '.[0].product_id'

      - name: resource-id
        dependencies: [acquire]
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{workflow.parameters.resources}}"
          - name: jq_query
            value: '.[0].resource_id'

      - name: trigger-orchestration-workflow
        dependencies: [resource-vsb, product-id, resource-id]
        template: trigger-orchestration-workflow
        arguments:
          parameters:
          - name: resource_vsb
            value: "{{tasks.resource-vsb.outputs.result}}"
          - name: resource_id
            value: "{{tasks.resource-id.outputs.result}}"
          - name: product_id
            value: "{{tasks.product-id.outputs.result}}"

  - name: srds-service
    inputs:
      parameters:
      - name: service_ip
      - name: service_port
      - name: resourceSpecCharacteristic
      - name: category
      - name: latitude
      - name: longitude
      - name: requested_price
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys
        requested_price = str("{{inputs.parameters.requested_price}}")
        price = requested_price.split('-')[0]
        headers = {'Content-Type': 'application/json'}
        # category: vnf
        # resourceSpecCharacteristic: CDN
        r = requests.get("http://{{inputs.parameters.service_ip}}:{{inputs.parameters.service_port}}/discoveroffer/"
            "{{inputs.parameters.category}}_lat{{inputs.parameters.latitude}}_long{{inputs.parameters.longitude}}_" + str(price) + "_{{inputs.parameters.resourceSpecCharacteristic}}",
            headers=headers)
        # return offers
        json.dump(r.json(), sys.stdout)

  - name: acquire
    # acquire is devided into two sub-tasks:
    # 1. the acquire operation itself
    # 2. branch to inspect acquire status and either fail the flow
    # or proceed as normal
    inputs:
      parameters:
      - name: product_id
    steps:
      - - name: acquire-resource
          template: acquire-simulator
          arguments:
            parameters:
            - name: product_id
              value: "{{inputs.parameters.product_id}}"

      - - name: fail-flow
          templateRef:
            name: workflow-base
            template: fail
          when: "{{steps.acquire-resource.outputs.parameters.status}} == \"FAIL\""

  - name: acquire-simulator
    # simulate a resource purchase with a return of a
    # fail/success status
    inputs:
      parameters:
      - name: product_id
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import random
        import sys
        status = "acquire_success"
        json.dump({"product_id": "{{inputs.parameters.product_id}}", "status": status}, sys.stdout)
        with open("/tmp/status.txt", "a") as myfile:
            myfile.write(status)
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status.txt

  - name: trigger-orchestration-workflow
    inputs:
      parameters:
      - name: resource_vsb
      - name: product_id
      - name: resource_id
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-orchestration-workflow
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}", "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                  "operation": "submit_orchestration",
                  "resource_vsb": "{{inputs.parameters.resource_vsb}}", "product_id": "{{inputs.parameters.product_id}}",
                  "resource_id": "{{inputs.parameters.resource_id}}",
                  "service_owner": "{{workflow.parameters.service_owner}}", "service_id": "{{workflow.parameters.service_id}}",
                  "category": "{{workflow.parameters.category}}", "qos_parameters": {{workflow.parameters.qos_parameters}} }
            - name: kafka_topic
              value: "issm-domain-{{workflow.parameters.service_owner_target}}"
