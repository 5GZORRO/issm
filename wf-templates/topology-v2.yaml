# Copyright 2020 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-topology
spec:
  templates:
  - name: update-topology
    inputs:
      parameters:
      - name: resource_specs
      - name: app_topology
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import sys

        def find(l, predicate):
            """
            util method
            """
            results = [x for x in l if predicate(x)]
            return results[0] if len(results) > 0 else None

        resource_specs = {{inputs.parameters.resource_specs}}
        app_topology = {{inputs.parameters.app_topology}}

        mem_unit = ""
        mem_min = ""
        mem_max = ""
        cpu_min = ""
        cpu_max = ""
        storage_unit = ""
        storage_min = ""
        storage_max = ""

        for r in resource_specs:
            name = r[0]['name']
            sys.stdout.write('name: "%s" \n' % name)

            rsc_list = r[0]['resourceSpecCharacteristic']
            # 2. vCPU Requirements
            element = find(rsc_list, lambda e: e.get('name', '') == 'vCPU Requirements')
            if not element:
                raise Exception("*** Unable to find 'vCPU Requirements' ***")

            # min
            min = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'min-vCPU')
            if not min:
                raise Exception("*** Unable to find 'min-vCPU' ***")
            cpu_min = min['value']['value']

            # max
            max = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'max-vCPU')
            if not max:
                raise Exception("*** Unable to find 'max-vCPU' ***")
            cpu_max = max['value']['value']

            sys.stdout.write('cpu_min/max: "%s, %s" \n' % (cpu_min, cpu_max))

            # 3. Virtual Memory Requirements
            element = find(rsc_list, lambda e: e.get('name', '') == 'Virtual Memory Requirements')
            if not element:
                raise Exception("*** Unable to find 'Virtual Memory Requirements' ***")

            # min
            min = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'min-virtual-memory')
            if not min:
                raise Exception("*** Unable to find 'min-virtual-memory' ***")
            mem_min = min['value']['value']
            mem_unit = min['unitOfMeasure']

            # max
            max = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'max-virtual-memory')
            if not max:
                raise Exception("*** Unable to find 'max-virtual-memory' ***")
            mem_max = max['value']['value']

            sys.stdout.write('mem_min/max: "%s, %s" \n' % (mem_min, mem_max))
            sys.stdout.write('mem_unit: "%s" \n' % mem_unit)

            # 4. Storage Requirements
            element = find(rsc_list, lambda e: e.get('name', '') == 'Storage Requirements')
            if not element:
                raise Exception("*** Unable to find 'Storage Requirements' ***")

            # min
            min = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'min-storage')
            if not min:
                raise Exception("*** Unable to find 'min-storage' ***")
            storage_min = min['value']['value']
            storage_unit = min['unitOfMeasure']

            # max
            max = find(element['resourceSpecCharacteristicValue'], lambda e: e['value']['alias'] == 'max-storage')
            if not max:
                raise Exception("*** Unable to find 'max-storage' ***")
            storage_max = max['value']['value']

            sys.stdout.write('storage_min/max: "%s, %s" \n' % (storage_min, storage_max))
            sys.stdout.write('storage_unit: "%s" \n' % storage_unit)

            sys.stdout.write('\n\n\n')

            node = find(app_topology['nodes'], lambda e: e['id'] == name)
            if not node:
                raise Exception('*** Unable to find matching application topology node for %s ***' % name)
    
            node['minConfig'] = {
                'cpu': {'value': cpu_min},
                'mem': {'value': mem_min, 'units': mem_unit},
                'storage': {'value': storage_min, 'units': storage_unit},
            }

        sys.stdout.write('UPDATED topology: "%s" \n' % app_topology)
        with open('/tmp/app_topology.txt', 'w') as f:
            json.dump(app_topology, f)

    outputs:
      parameters:
      - name: app_topology
        valueFrom:
          path: /tmp/app_topology.txt

#########################################
#
# MOCKED
  - name: mock-optimizer-output
    inputs:
      parameters:
      - name: resources
      - name: app_topology
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import sys

        def find(l, predicate):
            """
            util method
            """
            results = [x for x in l if predicate(x)]
            return results[0] if len(results) > 0 else None

        resources = {{inputs.parameters.resources}}
        app_topology = {{inputs.parameters.app_topology}}

        # 1. core
        core_element = find(resources, lambda e: e['offer_object']['name'] == 'Edge Resource Offer (core 1)')
        if not core_element:
            raise Exception ('*** WARN Missing core Edge ***\n')

        # 2. upf (1)
        upf1_element = find(resources, lambda e: e['offer_object']['name'] == 'Edge Resource Offer (upf 1)')
        if not upf1_element:
            raise Exception ('*** WARN Missing upf 1 Edge ***\n')

        # 3. upf (2)
        upf2_element = find(resources, lambda e: e['offer_object']['name'] == 'Edge Resource Offer (upf 2)')
        if not upf2_element:
            raise Exception ('*** WARN Missing upf 2 Edge ***\n')

        # 2. app (1)
        app1_element = find(resources, lambda e: e['offer_object']['name'] == 'Edge Resource Offer (cache 1)')
        if not app1_element:
            raise Exception ('*** WARN Missing app 1 Edge ***\n')

        # 3. app (2)
        app2_element = find(resources, lambda e: e['offer_object']['name'] == 'Edge Resource Offer (cache 2)')
        if not app2_element:
            raise Exception ('*** WARN Missing app 2 Edge ***\n')


        optimizer_output = [
            {
                'index': 0,
                'mapped_function': 'core',
                'selected_offer': core_element
            },
            {
                'index': 1,
                'mapped_function': 'upf',
                'selected_offer': upf1_element
            },
            {
                'index': 2,
                'mapped_function': 'app',
                'selected_offer': app1_element
            },
            {
                'index': 3,
                'mapped_function': 'upf',
                'selected_offer': upf2_element
            },
            {
                'index': 4,
                'mapped_function': 'app',
                'selected_offer': app2_element
            }
        ]

        with open('/tmp/optimizer_output.txt', 'w') as f:
            # flatten it (like print) since it's going to be published on
            # kafka
            f.write(str(optimizer_output))

    outputs:
      parameters:
      - name: optimizer_output
        valueFrom:
          path: /tmp/optimizer_output.txt
#
#
#########################################

  - name: entry-attributes
    # Return various optimizer output entry entry attributes such as index,
    # selected_offer, mapped_function
    #
    # Parameters
    # resource: a resource offer as returned by SRSD (json)
    #
    # Outputs
    # refer to <outputs:> section for details
    inputs:
      parameters:
      - name: entry
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import sys

        def find(l, predicate):
            """
            util method
            """
            results = [x for x in l if predicate(x)]
            return results[0] if len(results) > 0 else None

        # po is an element received from sensor which is a flattened json
        # none-pythonic json (null, true, false, ..)
        entry = '{{inputs.parameters.entry}}'
        entry_json = json.loads(entry)

        index = ""
        selected_offer = {}
        mapped_function = ""

        # selected_offer
        selected_offer = entry_json['selected_offer']
        sys.stdout.write('selected_offer: "%s" \n' % selected_offer)

        # index
        index = entry_json['index']
        sys.stdout.write('index: "%s" \n' % index)

        # mapped_function
        mapped_function = entry_json['mapped_function']
        sys.stdout.write('mapped_function: "%s" \n' % mapped_function)

        with open('/tmp/index.txt', 'w') as f:
            f.write(str(index))

        with open('/tmp/mapped_function.txt', 'w') as f:
            f.write(mapped_function)

        with open('/tmp/selected_offer.txt', 'w') as f:
            json.dump(selected_offer, f)

    outputs:
      parameters:
      - name: index
        valueFrom:
          path: /tmp/index.txt

      - name: mapped_function
        valueFrom:
          path: /tmp/mapped_function.txt

      - name: selected_offer
        valueFrom:
          path: /tmp/selected_offer.txt
