apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-slice
spec:
  templates:
  - name: create-sla
    # Create new SLA for the given vertical tenant
    #
    # Parameters:
    # slicer_ip: ipaddress of the vertical slicer service (str)
    # group_name: group name of the tenant (str)
    # tenant_name: tenant name (str)
    # cpu: ?? (str)
    # ram: ?? (str)
    # disk: ?? (str)
    #
    inputs:
      parameters:
      - name: slicer_ip
      - name: group_name
      - name: tenant_name
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      command: [sh]
      source: |
        generate_post_sla_create()
        {
          cat <<EOF
        {
                "slaStatus": "ENABLED",
                "slaConstraints": [{
                        "maxResourceLimit": {
                                        "diskStorage": 100,
                                        "vCPU": 10,
                                        "memoryRAM": 10240
                                },
                        "scope": "GLOBAL_VIRTUAL_RESOURCE"
                        }
                ]
        }
        EOF
        }
        echo "Log in as admin.."
        curl -X POST -d username=admin -d password=admin -c /tmp/a_c http://{{inputs.parameters.slicer_ip}}:8082/login
        curl -b /tmp/a_c --write-out '%{http_code}' --data "$(generate_post_sla_create)" -X POST http://{{inputs.parameters.slicer_ip}}:8082/vs/admin/group/5gzorro/tenant/my-mno/sla --header "Content-Type:application/json"

  - name: create-tenant
    # Create new tenant in vertical slicer
    #
    # Parameters:
    # slicer_ip: ipaddress of the vertical slicer service (str)
    # group_name: group name the tenant will be created under (str)
    # tenant_name: the name of the vertical tenant to create (str)
    #
    inputs:
      parameters:
      - name: slicer_ip
      - name: group_name
      - name: tenant_name
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      command: [sh]
      source: |
        generate_post_tenant_create()
        {
          cat <<EOF
        {
          "username": "{{inputs.parameters.tenant_name}}",
          "password": "{{inputs.parameters.tenant_name}}"
        }
        EOF
        }
        curl -X POST -d username=admin -d password=admin -c /tmp/a_c http://{{inputs.parameters.slicer_ip}}:8082/login
        curl -b /tmp/a_c --write-out '%{http_code}' -X POST http://{{inputs.parameters.slicer_ip}}:8082/vs/admin/group/{{inputs.parameters.group_name}}/tenant --data "$(generate_post_tenant_create)" --header "Content-Type:application/json"

  - name: create-group
    # Create a new group in vertical slicer
    #
    # Parameters:
    # slicer_ip: ipaddress of the vertical slicer service (str)
    # group_name: group name (str)
    #
    inputs:
      parameters:
      - name: slicer_ip
      - name: group_name
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      command: [sh]
      source: |
        curl  -X POST -d username=admin -d password=admin -c /tmp/a_c http://{{inputs.parameters.slicer_ip}}:8082/login
        curl  -b /tmp/a_c --write-out '%{http_code}' -X POST http://{{inputs.parameters.slicer_ip}}:8082/vs/admin/group/{{inputs.parameters.group_name}} --header "Content-Type:application/json"

  - name: create-descriptor
    # Create a new VSD from the given blueprint name
    #
    # Parameters:
    # slicer_ip: ipaddress of the vertical slicer service (str)
    # tenant_name: the name of the vertical tenant (str)
    # blueprint_name: the name of the blueprint VSD is created from
    # name: VSD name
    # parameters: qos parameters to be given to this VSD
    #
    # outputs:
    # vsd_id: vertical descriptor id    
    inputs:
      parameters:
      - name: slicer_ip
      - name: tenant_name
      - name: blueprint_name
      - name: parameters
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      command: [sh]
      source: |
        generate_post_descriptor_create()
        {
          cat <<EOF
        {
          "vsd": {
            "name": "$1",
            "version": "0.1",
            "sst": "EMBB",
            "managementType": "PROVIDER_MANAGED",
            "vsBlueprintId": "$2",
            "qosParameters": {{inputs.parameters.parameters}}
          },
          "tenantId": "{{inputs.parameters.tenant_name}}",
          "isPublic": "true"
        }
        EOF
        }

        echo "Log in admin.."
        curl -X POST -d username=admin -d password=admin -c /tmp/a_c http://{{inputs.parameters.slicer_ip}}:8082/login

        echo "Retrieve blueprints.."
        bp_list="$(curl -b /tmp/a_c http://{{inputs.parameters.slicer_ip}}:8082/portal/catalogue/vsblueprint --header "Content-Type:application/json" 2>/dev/null)"

        bp_id="$(echo $bp_list | jq -r '.[] | select(.name=="{{inputs.parameters.blueprint_name}}") | .vsBlueprintId')"
        echo "Blueprint id [$bp_id] matches blueprint_name [{{inputs.parameters.blueprint_name}}]"

        echo "Log in {{inputs.parameters.tenant_name}}.."
        curl -X POST -d username={{inputs.parameters.tenant_name}} -d password={{inputs.parameters.tenant_name}} -c /tmp/t_c http://{{inputs.parameters.slicer_ip}}:8082/login

        # note: slicer does not accept two descriptors with same name
        echo "Create descriptor.."
        uuid=$(cat /proc/sys/kernel/random/uuid)
        vsd_id="$(curl -b /tmp/t_c --data "$(generate_post_descriptor_create $uuid $bp_id)" -X POST http://{{inputs.parameters.slicer_ip}}:8082/portal/catalogue/vsdescriptor --header "Content-Type:application/json" 2>/dev/null)"
        echo $vsd_id > /tmp/id.txt
    outputs:
      parameters:
      - name: vsd_id
        valueFrom:
          path: /tmp/id.txt


  - name: create-instance
    # Create a new VSI
    #
    # Parameters:
    # slicer_ip: ipaddress of the vertical slicer service (str)
    # tenant_name: the name of the vertical tenant to create (str)
    # vsd_id: the id of the descriptor this VSI is created from (str)
    #
    # outputs:
    # vsi_id: vertical service instance id
    inputs:
      parameters:
      - name: slicer_ip
      - name: tenant_name
      - name: vsd_id
      - name: name
      - name: userdata
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      command: [sh]
      source: |
        generate_post_instance_create()
        {
          cat <<EOF
        {
          "name": "{{inputs.parameters.name}}",
          "description": "5G Zorro demo slice",
          "vsdId": "{{inputs.parameters.vsd_id}}",
          "tenantId": "{{inputs.parameters.tenant_name}}",
          "userData": {{inputs.parameters.userdata}}
        }
        EOF
        }

        echo "Log in {{inputs.parameters.tenant_name}}.."
        curl -X POST -d username={{inputs.parameters.tenant_name}} -d password={{inputs.parameters.tenant_name}} -c /tmp/t_c http://{{inputs.parameters.slicer_ip}}:8082/login

        echo "Create instance.."
        vsi_id="$(curl -b /tmp/t_c --data "$(generate_post_instance_create $vsd_id)" -X POST http://{{inputs.parameters.slicer_ip}}:8082/vs/basic/vslcm/vs --header "Content-Type:application/json" 2>/dev/null)"
        echo $vsi_id > /tmp/id.txt
    outputs:
      parameters:
      - name: vsi_id
        valueFrom:
          path: /tmp/id.txt


  - name: poll
    # Poll for some VSI attribute (in case poll=true) as denoted by by jq_query and jq_query_value.
    # timeout is relevant for polling only
    #
    # Parameters:
    # poll: whether or not to poll the VNFR (boolean). If false, then skip polling
    # slicer_ip: ipaddress of OSM
    # tenant_name: the name of the tenant
    # vsi_id: VSI id
    # jq_query: VSI attribute to poll/query (str in jq format)
    # jq_query_value: the conditional value of the attribute; applicable for polling mode (str)
    # timeout: polling timeout (seconds in integer)
    #
    # Return: TIMEOUT in case of timeout or the attribute value
    inputs:
      parameters:
      - name: poll
      - name: slicer_ip
      - name: tenant_name
      - name: vsi_id
      - name: jq_query
      - name: jq_query_value
      - name: timeout
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      command: [sh]
      source: |
        echo "Log in {{inputs.parameters.tenant_name}}.."
        curl -X POST -d username={{inputs.parameters.tenant_name}} -d password={{inputs.parameters.tenant_name}} -c /tmp/t_c http://{{inputs.parameters.slicer_ip}}:8082/login
      
        if [ {{inputs.parameters.poll}} = "true" ]; then
          i=0
          until [ "$(curl -b /tmp/t_c http://{{inputs.parameters.slicer_ip}}:8082/vs/basic/vslcm/vs/{{inputs.parameters.vsi_id}} | jq -r {{inputs.parameters.jq_query}})" == "{{inputs.parameters.jq_query_value}}" -o $i -gt {{inputs.parameters.timeout}} ]; do
             echo "Poll wait.. (1 sec)"
             sleep 1
             i=$((i+1))
          done
          if [ $i -gt {{inputs.parameters.timeout}} ]; then
            echo "TIMEOUT"
            echo "TIMEOUT" > /tmp/status.txt
          else
            echo "$(curl -b /tmp/t_c http://{{inputs.parameters.slicer_ip}}:8082/vs/basic/vslcm/vs/{{inputs.parameters.vsi_id}} | jq -r {{inputs.parameters.jq_query}})" > /tmp/status.txt
          fi
        else  
          echo "$(curl -b /tmp/t_c http://{{inputs.parameters.slicer_ip}}:8082/vs/basic/vslcm/vs/{{inputs.parameters.vsi_id}} | jq -r {{inputs.parameters.jq_query}})" > /tmp/status.txt
        fi
    outputs:
      parameters:
      - name: status
        valueFrom:
          path: /tmp/status.txt

  - name: mda-settings
    inputs:
      parameters:
      - name: slicer_ip
      - name: tenant_name
      - name: vsi_id
      - name: input_topic
      - name: transaction_uuid
      - name: timestamp_start
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      command: [sh]
      source: |
        generate_post_mda()
        {
          cat <<EOF
        {
          "businessID": "{{inputs.parameters.transaction_uuid}}",
          "topic": "{{inputs.parameters.input_topic}}",
          "networkID": "{{inputs.parameters.vsi_id}}",
          "metrics": [{
              "metricName": "cpu_utilization",
              "metricType": "float",
              "aggregationMethod": "",
              "timestampStep": "30s"
            },
            {
              "metricName": "ram_utilization",
              "metricType": "float",
              "aggregationMethod": "",
              "timestampStep": "1m"
            },
            {
              "metricName": "disk_usage",
              "metricType": "float",
              "aggregationMethod": "",
              "timestampStep": "2m"
            }
          ],
          "timestampStart": "2021-03-22T00:00:01"
        }
        EOF
        }

        echo "Send settings to MDA.."
        curl --write-out '%{http_code}' --data "$(generate_post_mda)" -X POST http://{{inputs.parameters.slicer_ip}}:4000/settings --header "Content-Type:application/json"
