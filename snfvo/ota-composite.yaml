# Copyright 2020 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This sensor is responsible to onboard or remove a given snfvo from the given domain.
#
# It acts agaist two message types.
#
# (1) Notification messages being received from the communication bus upon order creation/deletion:
#
#     {"service_owner": "operator-c", "operation": "order", "sub_operation": "CREATED", "order_id": "50ebab4d-0865-4ef9-aa68-c4558312d28e"}
#     {"service_owner": "operator-c", "operation": "order", "sub_operation": "DELETED", "order_id": "50ebab4d-0865-4ef9-aa68-c4558312d28e"}
#
# (2) Instantiation operation against a given main order.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: snfvo-ota-composite
spec:
  templates:
  - name: instantiate
    steps:
    - - name: instantiate-service
        when: "{{workflow.parameters.sub_operation}} == \"INSTANTIATE_SERVICE\""
        template: instantiate-service


  - name: instantiate-service
    dag:
      tasks:
      - name: get-order-from-catalog
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.order_id}}"

      - name: trigger-instantiate
        dependencies: [get-order-from-catalog]
        template: trigger-instantiate
        arguments:
          parameters:
          - name: related_party
            value: "{{tasks.get-order-from-catalog.outputs.parameters.related_party}}"
          - name: order_id
            # TODO: replace with OTA
            value: |
              [
                {"uuid": "dc3ded2e-64ff-4c2c-b45e-b0e9ab05b0cc"},
                {"uuid": "7a347492-3be8-444c-9cb1-d1a87c7a7ad5", "main": "true"}
              ]
          - name: snfvo_data
            # TODO: replace with OTA
            value: |
              {
                "userdata_slice": {
                  "sm.plmn_id": "00103",
                  "sm.imsi_list": "001035432100005,001035432000003",
                  "sm.apn": "Zorro_vCDN"
                },
                "vsd_parameters": {
                 "users": "1000"
                }
              }

  - name: trigger-instantiate
    inputs:
      parameters:
      - name: related_party
      # list of orders ({uuid,main},..)
      - name: order_id
      - name: snfvo_data
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-instantiate
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              # note: service_owner in this sense is the owner of this order's offer (e.g. operator-c)
              # where it will perform the actual orchestration/stiching
              value: |
                {
                  "_name": "snfvo-pre-onboard-{{steps.event-uuid.outputs.result}}",
                  "issm": "true", "_operation": "instantiate",
                  "service_owner": "{{inputs.parameters.related_party}}",
                  "operation": "order",
                  "sub_operation": "PRE_ONBOARD_INSTANTIATE",
                  "order_id": "7a347492-3be8-444c-9cb1-d1a87c7a7ad5",
                  "intent": {
                    "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                    "event_uuid": "{{steps.event-uuid.outputs.result}}",
                    "service_owner": "{{inputs.parameters.related_party}}",
                    "operation": "instantiate", "sub_operation": "API",
                    "order_id": {{inputs.parameters.order_id}},
                    "snfvo_data": {{inputs.parameters.snfvo_data}}
                  }
                }
            - name: kafka_topic
              # Important: forward to aux so that snfvo is auto onboarded
              value: "issm-aux-{{inputs.parameters.related_party}}"

  - name: scaleout
    dag:
      tasks:
      - name: success
        templateRef:
          name: workflow-base
          template: success
