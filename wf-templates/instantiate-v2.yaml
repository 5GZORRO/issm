# Copyright 2020 - 2021 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: instantiate
spec:
  templates:
  - name: instantiate
    ###############################
    #
    # Entry point for instantiate
    #
    ###############################
    steps:
    - - name: network-service-instantiate
        template: network-service-instantiate
        when: "{{workflow.parameters.category}} == \"Network Service\""

    - - name: vnf-instantiate
        template: vnf-instantiate
        when: "{{workflow.parameters.category}} == \"VNF\""


  - name: vnf-instantiate
    dag:
      tasks:
        - name: zero-touch
          # an optimal Edge should be used
          when: "{{workflow.parameters.edge_order_id}} == \"DEFAULT\""
          template: vnf-instantiate-zero-touch

        - name: manual
          when: "{{workflow.parameters.edge_order_id}} != \"DEFAULT\""
          template: vnf-instantiate-manual


  - name: network-service-instantiate
    dag:
      tasks:
        - name: print-message
          # an optimal NS should be used
          when: "{{workflow.parameters.order_id}} == \"DEFAULT\""
          templateRef:
            template: workflow-base
            name: whalesay
          arguments:
            parameters:
            - name: message
              value: "Zero touch Network Service instantiation not supported"

        - name: manual
          when: "{{workflow.parameters.order_id}} != \"DEFAULT\""
          template: network-service-instantiate-manual


  - name: network-service-instantiate-manual
    dag:
      tasks:
        - name: get-order-from-catalog
          templateRef:
            template: workflow-catalog
            name: get-order-from-catalog
          arguments:
            parameters:
            - name: order_id
              value: "{{workflow.parameters.order_id}}"

        - name: trigger-orchestration
          dependencies: [get-order-from-catalog]
          template: trigger-orchestration
          arguments:
            parameters:
            - name: resource_owner
              value: "{{tasks.get-order-from-catalog.outputs.parameters.resource_owner}}"
            - name: resource_vsb
              value: "{{tasks.get-order-from-catalog.outputs.parameters.vsbName}}"
            - name: product_DID
              value: "{{tasks.get-order-from-catalog.outputs.parameters.did}}"
            - name: sla_DID
              value: "{{tasks.get-order-from-catalog.outputs.parameters.sla_did}}"
            - name: place
              value: "{{tasks.get-order-from-catalog.outputs.parameters.place}}"


  - name: vnf-instantiate-manual
    # VNF known, Edge known
    dag:
      tasks:
        - name: get-vnf-order-from-catalog
          template: get-order-from-catalog
          arguments:
            parameters:
            - name: order_id
              value: "{{workflow.parameters.order_id}}"

        - name: get-edge-order-from-catalog
          templateRef:
            template: workflow-catalog
            name: get-order-from-catalog
          arguments:
            parameters:
            - name: order_id
              value: "{{workflow.parameters.edge_order_id}}"

        - name: trigger-orchestration
          dependencies: [get-vnf-order-from-catalog, get-edge-order-from-catalog]
          template: trigger-orchestration
          arguments:
            parameters:
            - name: resource_owner
              value: "{{tasks.get-edge-order-from-catalog.outputs.parameters.resource_owner}}"
            - name: resource_vsb
              value: "{{tasks.get-vnf-order-from-catalog.outputs.parameters.vsbName}}"
            - name: product_DID
              value: "{{tasks.get-vnf-order-from-catalog.outputs.parameters.did}}"
            - name: sla_DID
              value: "{{tasks.get-vnf-order-from-catalog.outputs.parameters.sla_did}}"
            - name: place
              value: "{{tasks.get-edge-order-from-catalog.outputs.parameters.place}}"

  - name: vnf-instantiate-zero-touch
    # VNF known, Edge unknown
    dag:
      tasks:
        - name: get-order-from-catalog
          # VNF order
          template: get-order-from-catalog
          arguments:
            parameters:
            - name: order_id
              value: "{{workflow.parameters.order_id}}"

        - name: build-intent-query
          dependencies: [get-order-from-catalog]
          template: build-intent-query
          arguments:
            parameters:
            - name: place
              value: "{{workflow.parameters.place}}"
            - name: cpu_max
              value: "{{tasks.get-order-from-catalog.outputs.parameters.cpu_max}}"
            - name: mem_max
              value: "{{tasks.get-order-from-catalog.outputs.parameters.mem_max}}"
            - name: mem_unit
              value: "{{tasks.get-order-from-catalog.outputs.parameters.mem_unit}}"
            - name: storage_max
              value: "{{tasks.get-order-from-catalog.outputs.parameters.storage_max}}"
            - name: storage_unit
              value: "{{tasks.get-order-from-catalog.outputs.parameters.storage_unit}}"
  
        - name: srds-service
          template: srds-service
          dependencies: [build-intent-query]
          arguments:
            parameters:
            - name: service_ip
              value: "{{workflow.parameters.discovery_ip}}"
            - name: service_port
              value: "{{workflow.parameters.discovery_port}}"
            - name: intent_query
              value: "{{tasks.build-intent-query.outputs.result}}"
            - name: place
              value: "{{workflow.parameters.place}}"
  
        - name: send-resouces-to-optimizer
          dependencies: [srds-service]
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "transaction_uuid": "{{workflow.name}}", "topic": "issm-in-{{workflow.parameters.service_owner}}", 
                  "category": "{{workflow.parameters.category}}",
                  "resources": {{tasks.srds-service.outputs.result}},
                  "operation": "{{workflow.parameters.operation}}", "sub_operation": "BEST_OFFER_SELECTION",
                  "service_owner": "{{workflow.parameters.service_owner}}",
                  "sla_breach": {{workflow.parameters.sla_breach}},
                  "elma_url": "{{workflow.parameters.elma_url}}",
                  "order_id": "{{workflow.parameters.vnf_order_id}}",
                  "catalogue_url": "{{workflow.parameters.catalogue_url}}",
                  "trmf_url": "{{workflow.parameters.trmf_url}}"
                }
            - name: kafka_topic
              value: issm-optimizer

  - name: best-offer-selection
    ###############################
    #
    # Entry point for best offer
    # selection
    #
    ###############################
    steps:
    - - name: network-service-best-offers
        # currently, does not reach this step
        template: handle-best-offers
        when: "{{workflow.parameters.category}} == \"Network Service\""

    - - name: edge-cloud-best-offers
        template: edge-cloud-best-offers
        when: "{{workflow.parameters.category}} == \"VNF\""

  - name: edge-cloud-best-offers
    dag:
      tasks:
      - name: get-order-from-catalog
        templateRef:
          template: workflow-catalog
          name: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            # VNF order
            value: "{{workflow.parameters.order_id}}"

      - name: handle-best-offers
        # pretty print
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{workflow.parameters.resources}}"
          - name: jq_query
            value: '.'

      - name: loop-best-offers-resource
        # loop through 'resource' type offers
        dependencies: [handle-best-offers, get-order-from-catalog]
        template: loop-best-offers
        arguments:
          parameters:
          - name: best_offer
            value: "{{item}}"
          - name: resource_vsb
            value: "{{tasks.get-order-from-catalog.outputs.parameters.vsbName}}"
          - name: product_DID
            value: "{{tasks.get-order-from-catalog.outputs.parameters.did}}"
          - name: sla_DID
            value: "{{tasks.get-order-from-catalog.outputs.parameters.sla_did}}"
        withParam: "{{workflow.parameters.resources}}"

  - name: loop-best-offers
    inputs:
      parameters:
      - name: best_offer
      - name: resource_vsb
      - name: product_DID
      - name: sla_DID
    dag:
      tasks:
      - name: resource-owner
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_object.productSpecification.relatedParty[0].name'

      - name: process-mno-name
        dependencies: [resource-owner]
        templateRef:
          name: workflow-base
          template: correct-mno-name
        arguments:
          parameters:
          - name: mno_name
            value: "{{tasks.resource-owner.outputs.result}}"

      - name: resource-id
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_object.id'

      - name: resource-location
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_object.place[0]'

      - name: resource-did
        # for TRMF
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_did'

      - name: acquire
        dependencies: [process-mno-name, resource-location, resource-did, resource-id]
        template: acquire
        arguments:
          parameters:
          - name: resource_id
            value: "{{tasks.resource-id.outputs.result}}"
          - name: operator_id_seller
            value: "{{tasks.resource-service-owner.outputs.result}}"
          - name: operator_id_buyer
            value: "{{workflow.parameters.service_owner}}"
          - name: resource_did
            # selected Edge resource
            value: "{{tasks.resource-did.outputs.result}}"

      - name: trigger-orchestration
        dependencies: [acquire]
        template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            value: "{{tasks.process-mno-name.outputs.result}}"
          - name: resource_vsb
            value: "{{inputs.parameters.resource_vsb}}"
          - name: product_DID
            value: "{{inputs.parameters.product_DID}}"
          - name: sla_DID
            value: "{{inputs.parameters.sla_DID}}"
          - name: place
            value: "{{tasks.resource-location.outputs.result}}"

  - name: scaleout
    ###############################
    #
    # Entry point for scaleout
    #
    ###############################
    dag:
      tasks:
      - name: get-order-from-catalog
        templateRef:
          name: workflow-catalog
          template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.order_id}}"

      - name: service-scaleout
        dependencies: [get-order-from-catalog]
        templateRef:
          name: "{{tasks.get-order-from-catalog.outputs.parameters.name}}"
          template: scaleout


  - name: orchestrate
    ###############################
    #
    # Entry point for orchestration
    #
    ###############################
    templateRef:
      name: orchestrate 
      template: orchestrate

  - name: acquire
    # acquire is devided into two sub-tasks:
    # 1. the acquire operation itself
    # 2. branch to inspect acquire status and either fail the flow
    # or proceed as normal with notifying trmf with the acquired offer
    inputs:
      parameters:
      - name: resource_id
      - name: operator_id_seller
      - name: operator_id_buyer
      - name: resource_did
    steps:
      - - name: acquire-resource
          templateRef:
            name: workflow-catalog
            template: create-order
          arguments:
            parameters:
            - name: resource_id
              value: "{{inputs.parameters.resource_id}}"
            - name: operator_id_seller
              value: "{{inputs.parameters.operator_id_seller}}"
            - name: operator_id_buyer
              # TODO: can it be passed as is ?
              value: "{{workflow.parameters.service_owner}}"

      - - name: notify-reputation-manager
          templateRef:
            name: workflow-catalog
            template: notify-trmf
          arguments:
            parameters:
            - name: resource_did
              value: "{{inputs.parameters.resource_did}}"


  - name: trigger-orchestration
    inputs:
      parameters:
      - name: resource_owner
      - name: resource_vsb
      - name: product_DID
      - name: sla_DID
      - name: place
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-orchestration
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}", "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                  "operation": "INSTANTIATE", "sub_operation": "ORCHESTRATE",
                  "place": {{inputs.parameters.place}},
                  "elma_url": "{{workflow.parameters.elma_url}}",
                  "resource_vsb": "{{inputs.parameters.resource_vsb}}", "product_DID": "{{inputs.parameters.product_DID}}",
                  "sla_DID": "{{inputs.parameters.sla_DID}}",
                  "service_owner": "{{workflow.parameters.service_owner}}", ???? "service_id": "{{workflow.parameters.service_id}}",
                  "resource_owner": "{{inputs.parameters.resource_owner}}",
                  "sla_breach": {{workflow.parameters.sla_breach}}
                }
            - name: kafka_topic
              value: "issm-in-{{inputs.parameters.resource_owner}}"








































  - name: handle-submit-instantiate
    steps:
    # Branching point according to internal state
    # of the transaction
    steps:
    - - name: handle-new-intent-instantiate
        template: handle-new-intent-instantiate
        when: "{{workflow.parameters.sub_operation}} == \"new_intent\""

    - - name: handle-orchestration-instantiate
        templateRef:
          name: uc3-orchestration-template
          template: orchestration-instantiate
        when: "{{workflow.parameters.sub_operation}} == \"submit_orchestration\""

  - name: handle-submit-scaleout
    # Branching point according to internal state
    # of the transaction
    steps:
    - - name: handle-new-intent
        template: handle-new-intent
        when: "{{workflow.parameters.sub_operation}} == \"new_intent\""

    - - name: handle-best-offers
        template: handle-best-offers
        when: "{{workflow.parameters.sub_operation}} == \"submit_bp\""

    - - name: handle-orchestration
        templateRef:
          name: uc3-orchestration-template
          template: orchestration-scaleout
        when: "{{workflow.parameters.sub_operation}} == \"submit_orchestration\""


  - name: handle-new-intent-instantiate
    dag:
      tasks:
      - name: get-vnf-order-from-catalog
        template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.vnf_order_id}}"

      - name: get-edge-order-from-catalog
        template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.edge_order_id}}"

      - name: trigger-orchestration-instantiate
        dependencies: [get-vnf-order-from-catalog, get-edge-order-from-catalog]
        template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            value: "{{tasks.get-edge-order-from-catalog.outputs.parameters.resource_owner}}"
          - name: resource_vsb
            value: "{{tasks.get-vnf-order-from-catalog.outputs.parameters.vsbName}}"
          - name: product_DID
            value: "{{tasks.get-vnf-order-from-catalog.outputs.parameters.did}}"
          - name: sla_DID
            value: "{{tasks.get-vnf-order-from-catalog.outputs.parameters.sla_did}}"
          - name: place
            value: "{{tasks.get-edge-order-from-catalog.outputs.parameters.place}}"
            

  - name: handle-new-intent
    dag:
      tasks:
      - name: get-order-from-catalog
        template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.vnf_order_id}}"

      - name: build-intent-query
        dependencies: [get-order-from-catalog]
        template: build-intent-query
        arguments:
          parameters:
          - name: place
            value: "{{workflow.parameters.place}}"
          - name: cpu_max
            value: "{{tasks.get-order-from-catalog.outputs.parameters.cpu_max}}"
          - name: mem_max
            value: "{{tasks.get-order-from-catalog.outputs.parameters.mem_max}}"
          - name: mem_unit
            value: "{{tasks.get-order-from-catalog.outputs.parameters.mem_unit}}"
          - name: storage_max
            value: "{{tasks.get-order-from-catalog.outputs.parameters.storage_max}}"
          - name: storage_unit
            value: "{{tasks.get-order-from-catalog.outputs.parameters.storage_unit}}"

      - name: srds-service
        template: srds-service
        dependencies: [build-intent-query]
        arguments:
          parameters:
          - name: service_ip
            value: "{{workflow.parameters.discovery_ip}}"
          - name: service_port
            value: "{{workflow.parameters.discovery_port}}"
          - name: intent_query
            value: "{{tasks.build-intent-query.outputs.result}}"
          - name: place
            value: "{{workflow.parameters.place}}"

      - name: send-resouces-to-optimizer
        # publish discovered resources for the optimizer to consume
        dependencies: [srds-service]
        templateRef:
          name: workflow-base
          template: publish-on-kafka
        arguments:
          parameters:
          - name: data
            value: |
              { "transaction_uuid": "{{workflow.name}}", "topic": "issm-in-{{workflow.parameters.service_owner}}", 
                "resources": {{tasks.srds-service.outputs.result}}, "scenario": "{{workflow.parameters.scenario}}",
                "operation": "{{workflow.parameters.operation}}", "sub_operation": "submit_bp",
                "service_owner": "{{workflow.parameters.service_owner}}", "elma_url": "{{workflow.parameters.elma_url}}",
                "vnf_order_id": "{{workflow.parameters.vnf_order_id}}",
                "catalogue_url": "{{workflow.parameters.catalogue_url}}", "trmf_url": "{{workflow.parameters.trmf_url}}",
                "service_id": "{{workflow.parameters.service_id}}",
                "sla_breach": {{workflow.parameters.sla_breach}}
              }
          - name: kafka_topic
            value: issm-optimizer

  - name: handle-best-offers
    dag:
      tasks:
      - name: get-order-from-catalog
        template: get-order-from-catalog
        arguments:
          parameters:
          - name: order_id
            value: "{{workflow.parameters.vnf_order_id}}"

      - name: handle-best-offers
        # this step is mainly for pretty print
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{workflow.parameters.resources}}"
          - name: jq_query
            value: '.'

      - name: loop-best-offers-resource
        # loop through 'resource' type offers
        dependencies: [handle-best-offers, get-order-from-catalog]
        template: loop-best-offers
        arguments:
          parameters:
          - name: best_offer
            value: "{{item}}"
          - name: resource_vsb
            value: "{{tasks.get-order-from-catalog.outputs.parameters.vsbName}}"
          - name: product_DID
            value: "{{tasks.get-order-from-catalog.outputs.parameters.did}}"
          - name: sla_DID
            value: "{{tasks.get-order-from-catalog.outputs.parameters.sla_did}}"
        withParam: "{{workflow.parameters.resources}}"

  - name: loop-best-offers
    inputs:
      parameters:
      - name: best_offer
      - name: resource_vsb
      - name: product_DID
      - name: sla_DID
    dag:
      tasks:
      - name: resource-service-owner
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_object.productSpecification.relatedParty[0].name'

      - name: process-mno-name
        dependencies: [resource-service-owner]
        templateRef:
          name: workflow-base
          template: correct-mno-name
        arguments:
          parameters:
          - name: mno_name
            value: "{{tasks.resource-service-owner.outputs.result}}"

      - name: resource-id
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_object.id'

      - name: resource-location
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_object.place[0]'

      - name: resource-did
        templateRef:
          name: workflow-base
          template: jq-script
        arguments:
          parameters:
          - name: json_str
            value: "{{inputs.parameters.best_offer}}"
          - name: jq_query
            value: '.offer_did'

      - name: acquire
        dependencies: [process-mno-name, resource-location, resource-did, resource-id]
        # invokes acquire template for every entry in resources list
        # waits for them to succeed and publishes status success for the
        # service owner to consume
        template: acquire
        arguments:
          parameters:
          - name: resource_id
            value: "{{tasks.resource-id.outputs.result}}"
          - name: operator_id_seller
            value: "{{tasks.resource-service-owner.outputs.result}}"
          - name: operator_id_buyer
            value: "{{workflow.parameters.service_owner}}"
          - name: resource_did
            # 3rd party selected Edge resource
            value: "{{tasks.resource-did.outputs.result}}"

      - name: trigger-orchestration-scaleout
        dependencies: [acquire]
        template: trigger-orchestration
        arguments:
          parameters:
          - name: resource_owner
            value: "{{tasks.process-mno-name.outputs.result}}"
          - name: resource_vsb
            value: "{{inputs.parameters.resource_vsb}}"
          - name: product_DID
            value: "{{inputs.parameters.product_DID}}"
          - name: sla_DID
            value: "{{inputs.parameters.sla_DID}}"
          - name: place
            value: "{{tasks.resource-location.outputs.result}}"

  - name: build-intent-query
    inputs:
      parameters:
      - name: place
      - name: cpu_max
      - name: mem_max
      - name: mem_unit
      - name: storage_max
      - name: storage_unit
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import sys
        # Example format: intent/$(urlencode 'storage 96 GB ram 2730 MB edge Barcelona'))
        location = {{inputs.parameters.place}}['city']

        cpu_max = str("{{inputs.parameters.cpu_max}}")

        mem_max = str("{{inputs.parameters.mem_max}}")
        mem_unit = str("{{inputs.parameters.mem_unit}}")

        storage_max = str("{{inputs.parameters.storage_max}}")
        storage_unit = str("{{inputs.parameters.storage_unit}}")

        sys.stdout.write(cpu_max + " cores" + " storage " + storage_max + " " + storage_unit + " ram " + mem_max + " " + mem_unit + " edge " +  location + " \n")

  - name: srds-service
    inputs:
      parameters:
      - name: service_ip
      - name: service_port
      - name: intent_query
      - name: place
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys
        import urllib
        import urllib.parse

        location = {{inputs.parameters.place}}['city']
        headers = {'Content-Type': 'application/json'}
        intent_query = str("{{inputs.parameters.intent_query}}")
        iq = urllib.parse.quote(intent_query)
        r = requests.get("http://{{inputs.parameters.service_ip}}:{{inputs.parameters.service_port}}/intent/" + iq, headers=headers)
        offers = r.json()

        print(offers)

  - name: acquire
    # acquire is devided into two sub-tasks:
    # 1. the acquire operation itself
    # 2. branch to inspect acquire status and either fail the flow
    # or proceed as normal with notifying trmf with the acquired offer
    inputs:
      parameters:
      - name: resource_id
      - name: operator_id_seller
      - name: operator_id_buyer
      - name: resource_did
    steps:
      - - name: acquire-resource
          template: create-order
          arguments:
            parameters:
            - name: resource_id
              value: "{{inputs.parameters.resource_id}}"
            - name: operator_id_seller
              value: "{{inputs.parameters.operator_id_seller}}"
            - name: operator_id_buyer
              # TODO: can it be passed as is ?
              value: "{{workflow.parameters.service_owner}}"

      - - name: notify-reputation-manager
          template: notify-trmf
          arguments:
            parameters:
            - name: resource_did
              value: "{{inputs.parameters.resource_did}}"


  - name: trigger-orchestration
    inputs:
      parameters:
      - name: resource_owner
      - name: resource_vsb
      - name: product_DID
      - name: sla_DID
      - name: place
    steps:
      - - name: event-uuid
          templateRef:
            name: workflow-base
            template: event-uuid
      - - name: publish-to-orchestration
          templateRef:
            name: workflow-base
            template: publish-on-kafka
          arguments:
            parameters:
            - name: data
              value: |
                { "event_uuid": "{{steps.event-uuid.outputs.result}}", "transaction_uuid": "{{workflow.parameters.transaction_uuid}}",
                  "operation": "{{workflow.parameters.operation}}", "sub_operation": "submit_orchestration",
                  "place": {{inputs.parameters.place}},
                  "scenario": "{{workflow.parameters.scenario}}", "elma_url": "{{workflow.parameters.elma_url}}",
                  "resource_vsb": "{{inputs.parameters.resource_vsb}}", "product_DID": "{{inputs.parameters.product_DID}}",
                  "sla_DID": "{{inputs.parameters.sla_DID}}",
                  "service_owner": "{{workflow.parameters.service_owner}}", "service_id": "{{workflow.parameters.service_id}}",
                  "resource_owner": "{{inputs.parameters.resource_owner}}",
                  "sla_breach": {{workflow.parameters.sla_breach}}
                }
            - name: kafka_topic
              value: "issm-in-{{inputs.parameters.resource_owner}}"
