# Copyright 2020 - 2021 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: issm-aux
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: aux-dep
      eventSourceName: issm-aux
      eventName: aux
  triggers:
    - template:
        name: kafka-workflow-trigger
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: issm-aux-
              spec:
                entrypoint: handlerequest
                arguments:
                  parameters:
                  - name: service_owner
                  - name: operation
                  - name: sub_operation

                  - name: order_id
                    value: OVERRIDE

                  - name: intent
                    value: OVERRIDE

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  # ISSM kafka bus
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  - name: kafka
                    value: 172.28.3.196:9092

                templates:
                - name: handlerequest
                  steps:
                  - - name: order
                      # Handle order related events
                      when: "{{workflow.parameters.operation}} == \"order\""
                      template: order

                - name: order
                  steps:
                  - - name: order-created
                      when: "{{workflow.parameters.sub_operation}} == \"CREATED\""
                      template: order-created

                  - - name: pre-onboard-instantiate
                      when: "{{workflow.parameters.sub_operation}} == \"PRE_ONBOARD_INSTANTIATE\""
                      template: pre-onboard-instantiate

                  - - name: order-deleted
                      when: "{{workflow.parameters.sub_operation}} == \"DELETED\""
                      template: order-deleted

                - name: order-created
                  steps:
                  - - name: get-domain-env
                      templateRef:
                        name: workflow-environment
                        template: get-domain-env
                      arguments:
                        parameters:
                        - name: domain
                          value: "{{workflow.parameters.service_owner}}"

                  - - name: onboard-snfvo
                      template: onboard-snfvo
                      arguments:
                        parameters:
                        - name: order_id
                          value: "{{workflow.parameters.order_id}}"
                        - name: catalogue_url
                          value: "{{steps.get-domain-env.outputs.parameters.catalogue_url}}"
                        - name: issm_api_url
                          value: "{{steps.get-domain-env.outputs.parameters.issm_api_url}}"


                - name: pre-onboard-instantiate
                  steps:
                  - - name: get-domain-env
                      templateRef:
                        name: workflow-environment
                        template: get-domain-env
                      arguments:
                        parameters:
                        - name: domain
                          value: "{{workflow.parameters.service_owner}}"

                  - - name: onboard-snfvo
                      template: onboard-snfvo
                      arguments:
                        parameters:
                        - name: order_id
                          value: "{{workflow.parameters.order_id}}"
                        - name: catalogue_url
                          value: "{{steps.get-domain-env.outputs.parameters.catalogue_url}}"
                        - name: issm_api_url
                          value: "{{steps.get-domain-env.outputs.parameters.issm_api_url}}"

                  - - name: forward-request
                      template: forward-request
                      arguments:
                        parameters:
                        - name: issm_api_url
                          value: "{{steps.get-domain-env.outputs.parameters.issm_api_url}}"
                        - name: intent
                          value: "{{workflow.parameters.intent}}"


                - name: order-deleted
                  steps:
                  - - name: get-domain-env
                      templateRef:
                        name: workflow-environment
                        template: get-domain-env
                      arguments:
                        parameters:
                        - name: domain
                          value: "{{workflow.parameters.service_owner}}"

                  - - name: delete-snfvo
                      template: delete-snfvo
                      arguments:
                        parameters:
                        - name: order_id
                          value: "{{workflow.parameters.order_id}}"
                        - name: catalogue_url
                          value: "{{steps.get-domain-env.outputs.parameters.catalogue_url}}"
                        - name: issm_api_url
                          value: "{{steps.get-domain-env.outputs.parameters.issm_api_url}}"


                - name: onboard-snfvo
                  # Onboard snfvo.
                  #
                  # Retrieve snfvo of the offer inside the order, create its template and
                  # update domain sensor to use it
                  #
                  # Parameters:
                  # order_id: order uuid (str)
                  # catalogue_url: URL to domain catalogue (str)
                  # issm_api_url: URL to domain ISSM API (str)
                  #
                  inputs:
                    parameters:
                    - name: order_id
                    - name: catalogue_url
                    - name: issm_api_url

                  script:
                    image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-yaml-v0.1
                    imagePullPolicy: IfNotPresent
                    command: [python]
                    source: |
                      import json
                      import requests
                      import yaml
                      import sys

                      order_id = "{{inputs.parameters.order_id}}"
                      catalogue_url = "{{inputs.parameters.catalogue_url}}"
                      issm_api_url = "{{inputs.parameters.issm_api_url}}"

                      service_owner = "{{workflow.parameters.service_owner}}"

                      def find(l, predicate):
                          """
                          util method
                          """
                          results = [x for x in l if predicate(x)]
                          return results[0] if len(results) > 0 else None

                      headers = {'Content-Type': 'application/json'}
                      r = requests.get("%s/tmf-api/productOrderingManagement/v4/productOrder/%s" % (catalogue_url, order_id), headers=headers)
                      #json.dump(r.json(), sys.stdout)
                      #sys.stdout.write('\n')

                      # retrieve the PO offer
                      po_href = r.json()['productOrderItem'][0]['productOffering']['href']
                      r = requests.get(str(po_href), headers=headers)
                      #json.dump(r.json(), sys.stdout)
                      #sys.stdout.write('\n')

                      po = r.json()

                      # Name
                      name = po['name']
                      sys.stdout.write('name: "%s" \n' % name)
              
                      # Id
                      po_id = po['id']
                      sys.stdout.write('po_id: "%s" \n' % po_id)

                      category = r.json()['category'][0]['name']
                      if category in ['Network Service', 'Slice']:
                          href = po['productSpecification']['href']
                          r = requests.get(str(href), headers=headers)
                          json.dump(r.json(), sys.stdout)
                          sys.stdout.write('\n')

                          href = r.json()['serviceSpecification'][0]['href']
                          r = requests.get(str(href), headers=headers)
                          json.dump(r.json(), sys.stdout)
                          sys.stdout.write('\n')

                          rsc_list = r.json()['serviceSpecCharacteristic']

                          # snfvoUrl
                          element = find(rsc_list, lambda e: e.get('name', '') == 'snfvoUrl')
                          if not element:
                              snfvoUrl = "https://raw.githubusercontent.com/5GZORRO/issm/master/snfvo/vcdn.yaml"
                              #raise Exception("*** Unable to find 'snfvoUrl' ***")
                          else:
                              snfvoUrl = element['serviceSpecCharacteristicValue'][0]['value']['value']
                              sys.stdout.write('snfvoUrl: "%s" \n' % snfvoUrl)

                      r = requests.get(snfvoUrl, headers=headers)
                      snfvo_json = yaml.safe_load(r.text)
                      json.dump(snfvo_json, sys.stdout)
                      sys.stdout.write('\n')

                      payload = {
                          "snfvo_name": name,
                          "product_offer_id": po_id,
                          "snfvo_json": snfvo_json
                      }

                      r = requests.post(issm_api_url+'/snfvo/%s' % service_owner, json=payload, headers=headers)
                      r.raise_for_status()


                - name: delete-snfvo
                  # Delete snfvo.
                  #
                  # Delete snfvo of the offer inside the order; delete its template and
                  # remove it from domain sensor
                  #
                  # Parameters:
                  # order_id: order uuid (str)
                  # catalogue_url: URL to domain catalogue (str)
                  # issm_api_url: URL to domain ISSM API (str)
                  #
                  inputs:
                    parameters:
                    - name: order_id
                    - name: catalogue_url
                    - name: issm_api_url

                  script:
                    image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-yaml-v0.1
                    imagePullPolicy: IfNotPresent
                    command: [python]
                    source: |
                      import json
                      import requests
                      import yaml
                      import sys

                      order_id = "{{inputs.parameters.order_id}}"
                      catalogue_url = "{{inputs.parameters.catalogue_url}}"
                      issm_api_url = "{{inputs.parameters.issm_api_url}}"
                      service_owner = "{{workflow.parameters.service_owner}}"

                      headers = {'Content-Type': 'application/json'}
                      r = requests.get("%s/tmf-api/productOrderingManagement/v4/productOrder/%s" % (catalogue_url, order_id), headers=headers)
                      #json.dump(r.json(), sys.stdout)
                      #sys.stdout.write('\n')

                      # retrieve the PO offer
                      po_href = r.json()['productOrderItem'][0]['productOffering']['href']
                      r = requests.get(str(po_href), headers=headers)
                      #json.dump(r.json(), sys.stdout)
                      #sys.stdout.write('\n')

                      po = r.json()

                      # Name
                      name = po['name']
                      sys.stdout.write('name: "%s" \n' % name)

                      # Id
                      po_id = po['id']
                      sys.stdout.write('po_id: "%s" \n' % po_id)

                      r = requests.delete(issm_api_url+'/snfvo/%s/%s' % (service_owner, po_id), headers=headers)
                      r.raise_for_status()

                - name: forward-request
                  inputs:
                    parameters:
                    - name: issm_api_url
                    - name: intent
                  script:
                    image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
                    imagePullPolicy: IfNotPresent
                    command: [python]
                    source: |
                      import json
                      import requests
                      import sys

                      from kafka import KafkaProducer
                      from kafka.errors import KafkaError

                      KAFKA_TOPIC = "issm-in-{{workflow.parameters.service_owner}}"
                      KAFKA_TIMEOUT = 10
                      KAFKA_API_VERSION = (1, 1, 0)

                      issm_api_url = "{{inputs.parameters.issm_api_url}}"
                      intent = {{inputs.parameters.intent}}

                      sys.stdout.write('issm_api_url: "%s"\n' % issm_api_url)
                      sys.stdout.write('intent: %s\n' % intent)

                      KAFKA_SERVER = "{}".format("{{workflow.parameters.kafka}}")
                      producer = KafkaProducer(bootstrap_servers=KAFKA_SERVER,
                                               api_version=KAFKA_API_VERSION,
                                               value_serializer=lambda v: json.dumps(v).encode('utf-8'))
              
                      t = producer.send(KAFKA_TOPIC, intent)
                      # Block for 'synchronous' send; set timeout on X seconds
                      try:
                          t.get(timeout=KAFKA_TIMEOUT)
                      except KafkaError as ke:
                          raise ke
                      print ("0")

          parameters:
            - src:
                dependencyName: aux-dep
                dataKey: body.service_owner
              dest: spec.arguments.parameters.0.value

            - src:
                dependencyName: aux-dep
                dataKey: body.operation
              dest: spec.arguments.parameters.1.value

            - src:
                dependencyName: aux-dep
                dataKey: body.sub_operation
              dest: spec.arguments.parameters.2.value

            - src:
                dependencyName: aux-dep
                dataKey: body.order_id
                value: DEFAULT
              dest: spec.arguments.parameters.3.value

            - src:
                dependencyName: aux-dep
                dataKey: body.intent
                value: |
                  {
                  }
              dest: spec.arguments.parameters.4.value
