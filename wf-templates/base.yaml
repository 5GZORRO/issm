# Copyright 2020 - 2021 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-base
spec:
  templates:
  - name: callback
    # Invoke user provided callback by publishing the given data into the provided
    # kafka topic (specified in callback json) of ISSM kafka bus.
    #
    # Note: if no callback provided then this step is considered as NOP
    #
    # Parameters
    # callback: callback (json)
    # data: the payload to publish (json)
    inputs:
      parameters:
      - name: callback
      - name: data
    steps:
    - - name: kafka-topic-from-callback
        template: from-key
        #when: "{{inputs.parameters.callback}} != \"DEFAULT\""
        arguments:
          parameters:
          - name: key
            value: "kafka_topic"
          - name: json_str
            value: "{{inputs.parameters.callback}}"

    - - name: invoke-callback
        template: produce
        #when: "{{inputs.parameters.callback}} != \"DEFAULT\""
        arguments:
          parameters:
          - name: kafka_topic
            value: "{{steps.kafka-topic-from-callback.outputs.result}}"
          - name: kafka_ip
            value: "{{workflow.parameters.kafka_ip}}"
          - name: kafka_port
            value: "{{workflow.parameters.kafka_port}}"
          - name: data
            value: "{{inputs.parameters.data}}"

  - name: publish-on-kafka
    inputs:
      parameters:
      - name: data
      - name: kafka_topic
    steps:
      - - name: publish-on-kafka
          template: produce
          arguments:
            parameters:
            - name: kafka_topic
              value: "{{inputs.parameters.kafka_topic}}"
            - name: kafka_ip
              value: "{{workflow.parameters.kafka_ip}}"
            - name: kafka_port
              value: "{{workflow.parameters.kafka_port}}"
            - name: data
              value: "{{inputs.parameters.data}}"

  - name: produce
    # Publish a message into kafka broker
    #
    # Parameters
    # kafka_topic: the topic to publish the message on (string)
    # kafka_ip: ipaddress of the kafka broker (string)
    # kafka_port: kafka broker port (number)
    # data: the payload to publish (json)
    inputs:
      parameters:
      - name: kafka_topic
      - name: kafka_ip
      - name: kafka_port
      - name: data
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import os

        from kafka import KafkaProducer
        from kafka.errors import KafkaError

        KAFKA_TOPIC = '{{inputs.parameters.kafka_topic}}'
        KAFKA_TIMEOUT = 10
        KAFKA_API_VERSION = (1, 1, 0)

        KAFKA_SERVER = "{}:{}".format("{{inputs.parameters.kafka_ip}}", "{{inputs.parameters.kafka_port}}")
        producer = KafkaProducer(bootstrap_servers=KAFKA_SERVER,
                                 api_version=KAFKA_API_VERSION,
                                 value_serializer=lambda v: json.dumps(v).encode('utf-8'))

        t = producer.send(KAFKA_TOPIC, {{inputs.parameters.data}})
        # Block for 'synchronous' send; set timeout on X seconds
        try:
            t.get(timeout=KAFKA_TIMEOUT)
        except KafkaError as ke:
            print("1")
        print ("0")

  - name: from-key
    inputs:
      parameters:
      - name: key
      - name: json_str
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json

        print({{inputs.parameters.json_str}}['{{inputs.parameters.key}}'])

  - name: jq-script
    inputs:
      parameters:
      - name: json_str
      - name: jq_query
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [sh]
      source: |
        echo '{{inputs.parameters.json_str}}' | jq -r {{inputs.parameters.jq_query}}

  - name: fail
    script:
      image: debian:9.4
      imagePullPolicy: IfNotPresent
      command: [bash]
      source: |
        exit 123

  - name: event-uuid
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import uuid
        print(str(uuid.uuid4()).replace('-',''))

  - name: correct-mno-name
    # TODO: remove this once unified format is applied
    inputs:
      parameters:
      - name: mno_name
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        print(str("{{inputs.parameters.mno_name}}").replace('_','-').lower())

  - name: sla-breach-data
    inputs:
      parameters:
      - name: sla_breach
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import sys
      
        applicable = {{inputs.parameters.sla_breach}}['applicable']
        sys.stdout.write('applicable: "%s" \n' % applicable)
        transaction_uuid = "Not-applicble"
        try:
            transaction_uuid = {{inputs.parameters.sla_breach}}['breachPredictionNotification']['transactionID']
            sys.stdout.write('transaction_uuid: "%s" \n' % transaction_uuid)
        except:
            # missing breachPredictionNotification, its ok
            pass

        with open('/tmp/applicable.txt', 'w') as f:
            f.write(str(applicable))

        with open('/tmp/transaction_uuid.txt', 'w') as f:
            f.write(str(transaction_uuid))
    outputs:
      parameters:
      - name: applicable
        valueFrom:
          path: /tmp/applicable.txt

      - name: transaction_uuid
        valueFrom:
          path: /tmp/transaction_uuid.txt
