# Copyright 2020 - 2021 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: get-product-offer-
spec:
  entrypoint: handlerequest
  arguments:
    parameters:
    - name: catalogue_url
      value: http://172.28.3.15:31080
 
    - name: product_id
      value: 0f5460c1-efe4-42e6-85e5-57571989e270

    - name: service_owner
      value: operator-a

  templates:
  - name: handlerequest
    dag:
      tasks:
      - name: get-product-offer-from-catalog
        template: get-product-offer-from-catalog
        arguments:
          parameters:
          - name: product_id
            value: "{{workflow.parameters.product_id}}"

#      - name: fail
#        dependencies: [get-product-offer-from-catalog]
#        template: fail
#        when: "{{tasks.get-product-offer-from-catalog.outputs.parameters.status}} != 200"

  - name: get-product-offer-from-catalog
    #
    # Retrieve attributes of a VNF PO from the domain catalogue
    #
    # Parameters:
    # product_id: PO id
    #
    # outputs:
    # vsdName: blueprint name
    # memory: memory size for this VNF
    # memory_unit: memory unit (e.g. MB)
    # cpu_num: number of vCPU for this VNF
    # storage: storage size for this VNF
    # storage_unit: memory unit (e.g. GB)
    inputs:
      parameters:
      - name: product_id
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import re
        import requests
        import sys

        REGEX = re.compile('.*([0-9]+).*')

        def find(l, predicate):
            """
            util method
            """
            results = [x for x in l if predicate(x)]
            return results[0] if len(results) > 0 else None

        headers = {'Content-Type': 'application/json'}
        r = requests.get("{{workflow.parameters.catalogue_url}}/tmf-api/productCatalogManagement/v4/productOffering/{{inputs.parameters.product_id}}",
            headers=headers)
        json.dump(r.json(), sys.stdout)
        sys.stdout.write('\n')

        href = r.json()['productSpecification']['href']
        r = requests.get(str(href), headers=headers)
        json.dump(r.json(), sys.stdout)
        sys.stdout.write('\n')

        href = r.json()['resourceSpecification'][0]['href']
        r = requests.get(str(href), headers=headers)
        json.dump(r.json(), sys.stdout)
        sys.stdout.write('\n')

        rsc_list = r.json()[0]['resourceSpecCharacteristic']

        # 1. retrieve vnfdId
        element = find(rsc_list, lambda e: e.get('name', '') == 'vnfdId')
        if not element:
            raise Exception("*** Unable to find 'vnfdId' ***")
        vnfdId = element['resourceSpecCharacteristicValue'][0]['value']['value']
        sys.stdout.write('vnfdId: "%s" \n' % vnfdId)

        # 2. retrieve vsdName
        element = find(rsc_list, lambda e: e.get('name', '') == 'vsdName')
        if not element:
            raise Exception("*** Unable to find 'vsdName' ***")
        vsdName = element['resourceSpecCharacteristicValue'][0]['value']['value']
        sys.stdout.write('vsdName: "%s" \n' % vsdName)

        # 3. retrieve <vnfdId>-VM
        element = find(rsc_list, lambda e: e.get('name', '') == '%s-VM' % vnfdId)
        if not element:
            raise Exception("*** Unable to find '%s-VM' ***" % vnfdId)
        rsc_value = element['resourceSpecCharacteristicValue']

        # 3.a retrieve virtual-memory
        element = find(rsc_value, lambda e: e.get('value', {}).get('alias', '') == 'virtual-memory')
        if not element:
            raise Exception("*** Unable to find 'virtual-memory' ***")
        memory_unit = element['unitOfMeasure']
        memory = element['value']['value']
        sys.stdout.write('memory_unit: "%s" \n' % memory_unit)
        sys.stdout.write('memory: "%s" \n' % memory)

        # 3.b retrieve virtual-cpu
        element = find(rsc_value, lambda e: e.get('value', {}).get('alias', '') == 'virtual-cpu')
        if not element:
            raise Exception("*** Unable to find 'virtual-cpu' ***")
        cpu = element['value']['value']
        sys.stdout.write('cpu: "%s" \n' % cpu)
        cpu_num = REGEX.match(cpu).group(1)
        sys.stdout.write('cpu_num: "%s" \n' % cpu_num)

        # 3.b retrieve size-of-storage 0
        element = find(rsc_value, lambda e: e.get('value', {}).get('alias', '') == 'size-of-storage 0')
        if not element:
            raise Exception("*** Unable to find 'size-of-storage 0' ***")
        storage_unit = element['unitOfMeasure']
        storage = element['value']['value']
        sys.stdout.write('storage_unit: "%s" \n' % storage_unit)
        sys.stdout.write('storage: "%s" \n' % storage)

        with open('/tmp/vsdName.txt', 'w') as f:
            f.write(str(vsdName))

        with open('/tmp/memory_unit.txt', 'w') as f:
            f.write(str(memory_unit))

        with open('/tmp/memory.txt', 'w') as f:
            f.write(str(memory))

        with open('/tmp/cpu_num.txt', 'w') as f:
            f.write(str(cpu_num))

        with open('/tmp/storage_unit.txt', 'w') as f:
            f.write(str(storage_unit))

        with open('/tmp/storage.txt', 'w') as f:
            f.write(str(storage))

    outputs:
      parameters:
      - name: vsdName
        valueFrom:
          path: /tmp/vsdName.txt

      - name: memory_unit
        valueFrom:
          path: /tmp/memory_unit.txt

      - name: memory
        valueFrom:
          path: /tmp/memory.txt

      - name: cpu_num
        valueFrom:
          path: /tmp/cpu_num.txt

      - name: storage_unit
        valueFrom:
          path: /tmp/storage_unit.txt

      - name: storage
        valueFrom:
          path: /tmp/storage.txt

  - name: fail
    script:
      image: debian:9.4
      imagePullPolicy: IfNotPresent
      command: [bash]
      source: |
        exit 123
