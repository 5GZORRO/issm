# Copyright 2020 - 2022 IBM Corporation

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: workflow-discovery
spec:
  templates:
  - name: build-intent-query
    # Buid a discovery intent query with the supplied input paramaters (category, location and sizings)
    inputs:
      parameters:
      - name: category
      - name: place
      - name: cpu
      - name: mem
      - name: mem_unit
      - name: storage
      - name: storage_unit
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import sys
        # Example format: intent/$(urlencode 'storage 96 GB ram 2730 MB edge Barcelona'))
        location = {{inputs.parameters.place}}['city']

        category = str("{{inputs.parameters.category}}")

        cpu = str("{{inputs.parameters.cpu}}")

        mem = str("{{inputs.parameters.mem}}")
        mem_unit = str("{{inputs.parameters.mem_unit}}")

        storage = str("{{inputs.parameters.storage}}")
        storage_unit = str("{{inputs.parameters.storage_unit}}")

        query_str = ""
        if cpu != "":
            query_str += " " + cpu + " cores"
        if mem != "":
            query_str += " ram " + mem + " " + mem_unit
        if storage != "":
            query_str += " storage " + storage + " " + storage_unit

        query_str += " " + category + " " + location

        sys.stdout.write(query_str + "\n")


  - name: srds-service
    # Query discovery service with the given query intent.
    #
    # Parameters:
    # srsd_url: discovery service url (str)
    # intent_query: search query (json)
    #
    # Outputs:
    # offers: list of product offers (json)
    inputs:
      parameters:
      - name: srsd_url
      - name: intent_query
    script:
      image: docker.pkg.github.com/5gzorro/issm/python:alpine3.6-kafka-v0.1
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import requests
        import sys
        import urllib
        import urllib.parse

        headers = {'Content-Type': 'application/json'}
        intent_query = str("{{inputs.parameters.intent_query}}")
        iq = urllib.parse.quote(intent_query)
        r = requests.get("{{inputs.parameters.srsd_url}}/intent/" + iq, headers=headers)
        offers = r.json()

        print(offers)


  - name: resource-attributes
    # Return various resource offer attributes needed by the transaction flows
    inputs:
      parameters:
      - name: resource
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import sys

        def find(l, predicate):
            """
            util method
            """
            results = [x for x in l if predicate(x)]
            return results[0] if len(results) > 0 else None

        # po is an element received from sensor which is a flattened json
        # none-pythonic json (null, true, false, ..)
        po = '{{inputs.parameters.resource}}'
        po_json = json.loads(po)

        name = ""
        po_id = ""
        place = {}
        related_party = ""
        related_party_did = ""
        did = ""
        validFor = {}

        # Name
        name = po_json['offer_object']['name']
        sys.stdout.write('name: "%s" \n' % name)

        # Id
        po_id = po_json['offer_object']['id']
        sys.stdout.write('id: "%s" \n' % po_id)

        # Place
        place = po_json['offer_object']['place'][0]
        sys.stdout.write('place: "%s" \n' % place)

        # relatedParty
        related_party = po_json['offer_object']['productSpecification']['relatedParty'][0]['name']
        related_party = related_party.replace('_','-').lower()
        sys.stdout.write('related_party: "%s" \n' % related_party)

        related_party_did = po_json['offer_object']['productSpecification']['relatedParty'][0]['extendedInfo']
        sys.stdout.write('related_party_did: "%s" \n' % related_party_did)

        # Category
        category = po_json['offer_object']['category'][0]['name']
        sys.stdout.write('category: %s \n' % category)

        # DID
        did = po_json['offer_did']

        # validFor
        validFor = po_json['offer_object']['validFor']
        sys.stdout.write('validFor: %s \n' % validFor)

        # vsbName is applicable to RAN offers..
        vsbName = ""
        try:
            rsc_list = po_json['offer_object']['productSpecification']['resourceSpecification'][0]['resourceSpecCharacteristic']
            # r.json()[0]['resourceSpecCharacteristic']
            # 1. vsbName
            element = find(rsc_list, lambda e: e.get('name', '') == 'vsbName')
            if not element:
                pass
            else:
                vsbName = element['resourceSpecCharacteristicValue'][0]['value']['value']
                sys.stdout.write('vsbName: "%s" \n' % vsbName)
        except Exception as e:
            # vsbName is not mandatory
            sys.stdout.write('*** WARN ***: %s\n' % str(e))

        with open('/tmp/did.txt', 'w') as f:
            f.write(str(did))

        with open('/tmp/place.txt', 'w') as f:
            json.dump(place, f)

        with open('/tmp/related_party.txt', 'w') as f:
            f.write(related_party)
        with open('/tmp/related_party_did.txt', 'w') as f:
            f.write(related_party_did)

        with open('/tmp/name.txt', 'w') as f:
            f.write(name)

        with open('/tmp/id.txt', 'w') as f:
            f.write(po_id)

        with open('/tmp/vsbName.txt', 'w') as f:
            f.write(vsbName)

        with open('/tmp/validFor.txt', 'w') as f:
            json.dump(validFor, f)

        with open('/tmp/category.txt', 'w') as f:
            f.write(category)

    outputs:
      parameters:
      - name: place
        valueFrom:
          path: /tmp/place.txt

      - name: related_party
        valueFrom:
          path: /tmp/related_party.txt

      - name: related_party_did
        valueFrom:
          path: /tmp/related_party_did.txt

      - name: category
        valueFrom:
          path: /tmp/category.txt

      - name: did
        valueFrom:
          path: /tmp/did.txt

      - name: name
        valueFrom:
          path: /tmp/name.txt

      - name: id
        valueFrom:
          path: /tmp/id.txt

      - name: vsbName
        valueFrom:
          path: /tmp/vsbName.txt

      - name: validFor
        valueFrom:
          path: /tmp/validFor.txt


  - name: best-offer-ran
    # Returns the first ran offer that matches given related_party
    inputs:
      parameters:
      - name: resources_ran
      - name: related_party
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import sys

        # po is an element received from sensor which is a flattened json
        # none-pythonic json (null, true, false, ..)
        resources_ran = '{{inputs.parameters.resources_ran}}'
        related_party = "{{inputs.parameters.related_party}}"
        resources_ran_json = json.loads(resources_ran)
        sys.stdout.write('resources_ran: "%s"\nrelated_party: "%s"\nresources_ran_json: %s\n' %
                          (resources_ran, related_party, resources_ran_json))

        best_offer = {}
        for r in resources_ran_json:
            # relatedParty
            r_p = r['offer_object']['productSpecification']['relatedParty'][0]['name']
            r_p = r_p.replace('_','-').lower()
            sys.stdout.write('r_p: "%s" \n' % r_p)
            if r_p == related_party:
                best_offer = r
                break

        with open('/tmp/best_offer.txt', 'w') as f:
            json.dump(best_offer, f)

    outputs:
      parameters:
      - name: best_offer
        valueFrom:
          path: /tmp/best_offer.txt

  - name: best-offer-edge
    # Returns the first edge resource
    inputs:
      parameters:
      - name: resources
    script:
      image: python:alpine3.6
      imagePullPolicy: IfNotPresent
      command: [python]
      source: |
        import json
        import sys

        # po is an element received from sensor which is a flattened json
        # none-pythonic json (null, true, false, ..)
        resources = '{{inputs.parameters.resources}}'
        resources_json = json.loads(resources)

        best_offer = resources_json[0]

        with open('/tmp/best_offer.txt', 'w') as f:
            json.dump(best_offer, f)

    outputs:
      parameters:
      - name: best_offer
        valueFrom:
          path: /tmp/best_offer.txt
  